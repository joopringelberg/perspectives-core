// Generated by purs version 0.11.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Apply = require("../Control.Apply");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor = require("../Data.Functor");
var Data_Identity = require("../Data.Identity");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String_NonEmpty = require("../Data.String.NonEmpty");
var Global = require("../Global");
var Prelude = require("../Prelude");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String");
var URI_Common = require("../URI.Common");
var Fragment = function (x) {
    return x;
};
var unsafeToString = function (v) {
    return v;
};
var unsafeFromString = Fragment;
var toString = function (v) {
    return Global["decodeURIComponent"](v);
};
var showFragment = new Data_Show.Show(function (v) {
    return "(Fragment.unsafeFromString " + (Data_Show.show(Data_Show.showString)(v) + ")");
});
var semigroupFragment = Data_Semigroup.semigroupString;
var print = function (v) {
    return "#" + v;
};
var ordFragment = Data_Ord.ordString;
var monoidFragment = Data_Monoid.monoidString;
var fragmentChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("@")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("?"));
var fromString = function ($8) {
    return Fragment(URI_Common.printEncoded(fragmentChar)($8));
};
var parser = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("#"))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($9) {
    return Fragment(Data_String_NonEmpty.joinWith(Data_Foldable.foldableArray)("")($9));
})(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.pctEncoded)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty.singleton)(fragmentChar)))));
var eqFragment = Data_Eq.eqString;
module.exports = {
    fromString: fromString,
    toString: toString,
    unsafeFromString: unsafeFromString,
    unsafeToString: unsafeToString,
    parser: parser,
    print: print,
    fragmentChar: fragmentChar,
    eqFragment: eqFragment,
    ordFragment: ordFragment,
    semigroupFragment: semigroupFragment,
    monoidFragment: monoidFragment,
    showFragment: showFragment
};
