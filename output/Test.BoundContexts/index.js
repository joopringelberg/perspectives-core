// Generated by purs version 0.11.7
"use strict";
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Aff_Console = require("../Control.Monad.Aff.Console");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Perspectives_CoreTypes = require("../Perspectives.CoreTypes");
var Perspectives_DataTypeTripleGetters = require("../Perspectives.DataTypeTripleGetters");
var Perspectives_Effects = require("../Perspectives.Effects");
var Perspectives_ModelBasedTripleGetters = require("../Perspectives.ModelBasedTripleGetters");
var Perspectives_QueryCombinators = require("../Perspectives.QueryCombinators");
var Perspectives_RunMonadPerspectivesQuery = require("../Perspectives.RunMonadPerspectivesQuery");
var Perspectives_TripleGetterComposition = require("../Perspectives.TripleGetterComposition");
var Prelude = require("../Prelude");
var rolDef = "model:Perspectives$Property";
var log = function ($10) {
    return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Aff.monadAff)(Control_Monad_Aff_Console.log($10));
};
var test = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("=========================Test.BoundContexts================================"))(function () {
    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_DataTypeTripleGetters.iedereRolInContextM))(function (v) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("rolDef ## iedereRolInContextM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v)))(function () {
            return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_DataTypeTripleGetters.iedereRolInContextM)(Perspectives_DataTypeTripleGetters.bindingM)))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("rolDef ## iedereRolInContextM >-> bindingM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v1)))(function () {
                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery("model:Perspectives$externalProperty")(Perspectives_DataTypeTripleGetters.iedereRolInContextM))(function (v2) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("model:Perspectives$externalProperty ## iedereRolInContextM) = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v2)))(function () {
                            return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_QueryCombinators.filter(Perspectives_ModelBasedTripleGetters.hasBindingM)(Perspectives_DataTypeTripleGetters.iedereRolInContextM)))(function (v3) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("rolDef ## filter iedereRolInContextM hasBindingM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v3)))(function () {
                                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_ModelBasedTripleGetters.boundContextsM))(function (v4) {
                                        return log("rolDef ## boundContextsM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v4));
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
module.exports = {
    rolDef: rolDef,
    test: test,
    log: log
};
