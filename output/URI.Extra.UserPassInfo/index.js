// Generated by purs version 0.11.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Bind = require("../Control.Bind");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Identity = require("../Data.Identity");
var Data_Maybe = require("../Data.Maybe");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_String_NonEmpty = require("../Data.String.NonEmpty");
var Prelude = require("../Prelude");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var URI_Common = require("../URI.Common");
var URI_UserInfo = require("../URI.UserInfo");
var UserPassInfo = function (x) {
    return x;
};
var userPassInfoChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims);
var showUserPassInfo = new Data_Show.Show(function (v) {
    return "(UserPassInfo { user: " + (Data_Show.show(Data_String_NonEmpty.showNonEmptyString)(v.user) + (", password: " + (Data_Show.show(Data_Maybe.showMaybe(Data_String_NonEmpty.showNonEmptyString))(v.password) + "})")));
});
var print = function (v) {
    if (v.password instanceof Data_Maybe.Nothing) {
        return URI_UserInfo.unsafeFromString(URI_Common["printEncoded'"](userPassInfoChar)(v.user));
    };
    if (v.password instanceof Data_Maybe.Just) {
        return URI_UserInfo.unsafeFromString(Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(URI_Common["printEncoded'"](userPassInfoChar)(v.user))(Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(Data_String_NonEmpty.singleton(":"))(URI_Common["printEncoded'"](userPassInfoChar)(v.password.value0))));
    };
    throw new Error("Failed pattern match at URI.Extra.UserPassInfo line 68, column 3 - line 75, column 44: " + [ v.password.constructor.name ]);
};
var parse = function (ui) {
    var s = URI_UserInfo.unsafeToString(ui);
    var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Function.flip(Data_String_NonEmpty.splitAt)(s))(Data_String_NonEmpty.indexOf(":")(s));
    if (v instanceof Data_Maybe.Just && v.value0.before instanceof Data_Maybe.Nothing) {
        return new Data_Either.Left("Expected a username before a password segment");
    };
    if (v instanceof Data_Maybe.Just && (v.value0.before instanceof Data_Maybe.Just && v.value0.after instanceof Data_Maybe.Just)) {
        return Data_Either.Right.create({
            user: URI_Common["decodeURIComponent'"](v.value0.before.value0),
            password: Data_Functor.map(Data_Maybe.functorMaybe)(URI_Common["decodeURIComponent'"])(Data_String_NonEmpty.drop(1)(v.value0.after.value0))
        });
    };
    return Data_Either.Right.create({
        user: URI_Common["decodeURIComponent'"](s),
        password: Data_Maybe.Nothing.value
    });
};
var newtypeUserPassInfo = new Data_Newtype.Newtype(function (n) {
    return n;
}, UserPassInfo);
var eqUserPassInfo = new Data_Eq.Eq(function (x) {
    return function (y) {
        return Data_Eq.eq(Data_Maybe.eqMaybe(Data_String_NonEmpty.eqNonEmptyString))(x.password)(y.password) && Data_Eq.eq(Data_String_NonEmpty.eqNonEmptyString)(x.user)(y.user);
    };
});
var ordUserPassInfo = new Data_Ord.Ord(function () {
    return eqUserPassInfo;
}, function (x) {
    return function (y) {
        var v = Data_Ord.compare(Data_Maybe.ordMaybe(Data_String_NonEmpty.ordNonEmptyString))(x.password)(y.password);
        if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
        };
        if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
        };
        return Data_Ord.compare(Data_String_NonEmpty.ordNonEmptyString)(x.user)(y.user);
    };
});
module.exports = {
    UserPassInfo: UserPassInfo,
    parse: parse,
    print: print,
    userPassInfoChar: userPassInfoChar,
    eqUserPassInfo: eqUserPassInfo,
    ordUserPassInfo: ordUserPassInfo,
    newtypeUserPassInfo: newtypeUserPassInfo,
    showUserPassInfo: showUserPassInfo
};
