// Generated by purs version 0.11.7
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Maybe = require("../Data.Maybe");
var Data_Ring = require("../Data.Ring");
var Perspectives_ContextRoleParser = require("../Perspectives.ContextRoleParser");
var Perspectives_CoreTypes = require("../Perspectives.CoreTypes");
var Perspectives_Effects = require("../Perspectives.Effects");
var Perspectives_IndentParser = require("../Perspectives.IndentParser");
var Prelude = require("../Prelude");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String");
var parse = function (s) {
    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_IndentParser.runIndentParser(s)(Perspectives_ContextRoleParser.enclosingContext))(function (v) {
        if (v instanceof Data_Either.Left) {
            return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Aff.applicativeAff))(new Data_Either.Left([ {
                row: v.value0.value1.line - 1 | 0,
                column: v.value0.value1.column,
                text: v.value0.value0,
                type: "error"
            } ]));
        };
        return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Aff.applicativeAff))(new Data_Either.Right("Parse succeeded, resources stored!"));
    });
};
var expressionTypeForNextLine = function (s) {
    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_IndentParser.runIndentParser(s)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Aff.monadAff)))))(Text_Parsing_Parser_String.whiteSpace(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Aff.monadAff)))))(Perspectives_ContextRoleParser.expression)))(function (v) {
        if (v instanceof Data_Either.Left) {
            return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Aff.applicativeAff))("Kan de vorige regel niet ontleden.");
        };
        if (v instanceof Data_Either.Right) {
            return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Aff.applicativeAff))((function () {
                if (v.value0 === "enclosingContextDeclaration") {
                    return "Verwacht: Import of Section of rolbinding.";
                };
                if (v.value0 === "importExpression") {
                    return "Verwacht: Import of Section of rolbinding.";
                };
                if (v.value0 === "sectionHeading") {
                    return "Verwacht: context declaratie";
                };
                if (v.value0 === "contextDeclaration") {
                    return "Verwacht: (extern|intern) property = value, rol => (rol|context) of rol => met type declaratie op volgende regel.";
                };
                if (v.value0 === "publicContextPropertyAssignment") {
                    return "Verwacht: extern|intern property = value, rol => (rol|context) of rol => met type declaratie op volgende regel.";
                };
                if (v.value0 === "privateContextPropertyAssignment") {
                    return "Verwacht: intern property = value, rol => (rol|context) of rol => met type declaratie op volgende regel.";
                };
                if (v.value0 === "rolePropertyAssignment") {
                    return "Verwacht: property = value";
                };
                if (v.value0 === "isRoleDeclaration") {
                    return "Verwacht: property = value";
                };
                if (v.value0 === "oneLineComment") {
                    return "Alles kan.";
                };
                return "Verwacht: -- commentaar of: Type Instantie";
            })());
        };
        throw new Error("Failed pattern match at Perspectives.Parser line 49, column 3 - line 61, column 20: " + [ v.constructor.name ]);
    });
};
var errorsIn = function (previousLine) {
    return function (s) {
        return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_IndentParser.runIndentParser(s)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Aff.monadAff)))))(Text_Parsing_Parser_String.whiteSpace(Text_Parsing_Parser_String.stringLikeString)(Control_Monad_State_Trans.monadStateT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Aff.monadAff)))))(Perspectives_ContextRoleParser.expression)))(function (v) {
            if (v instanceof Data_Either.Left) {
                return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(expressionTypeForNextLine(previousLine))(function (v1) {
                    return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Aff.applicativeAff))(new Data_Maybe.Just([ {
                        row: v.value0.value1.line - 1 | 0,
                        column: v.value0.value1.column,
                        text: v1,
                        type: "error"
                    } ]));
                });
            };
            return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Aff.applicativeAff))(Data_Maybe.Nothing.value);
        });
    };
};
module.exports = {
    parse: parse,
    errorsIn: errorsIn,
    expressionTypeForNextLine: expressionTypeForNextLine
};
