// Generated by purs version 0.11.7
"use strict";
var Control_Category = require("../Control.Category");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class");
var Data_Array = require("../Data.Array");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Maybe = require("../Data.Maybe");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_String_Regex = require("../Data.String.Regex");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags");
var Data_String_Regex_Unsafe = require("../Data.String.Regex.Unsafe");
var Partial_Unsafe = require("../Partial.Unsafe");
var Perspectives_Utilities = require("../Perspectives.Utilities");
var Prelude = require("../Prelude");
var ModelName = function (x) {
    return x;
};
var QualifiedName = (function () {
    function QualifiedName(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    QualifiedName.create = function (value0) {
        return function (value1) {
            return new QualifiedName(value0, value1);
        };
    };
    return QualifiedName;
})();
var PerspectEntiteitIdentifier = function (pe_localName, pe_namespace) {
    this.pe_localName = pe_localName;
    this.pe_namespace = pe_namespace;
};
var userUriRegEx = Data_String_Regex_Unsafe.unsafeRegex("^model:User\\$")(Data_String_Regex_Flags.noFlags);
var userCurieRegEx = Data_String_Regex_Unsafe.unsafeRegex("^usr:")(Data_String_Regex_Flags.noFlags);
var showQualifiedName = new Data_Show.Show(function (v) {
    return v.value0 + ("$" + v.value1);
});
var showModelName = new Data_Show.Show(function (v) {
    return v;
});
var roleIndexNrRegex = Data_String_Regex_Unsafe.unsafeRegex("_(\\d+)$")(Data_String_Regex_Flags.noFlags);
var roleIndexNr = function (s) {
    var v = Data_String_Regex.match(roleIndexNrRegex)(s);
    if (v instanceof Data_Maybe.Just) {
        return Data_Maybe.maybe(Data_Maybe.Nothing.value)(Control_Category.id(Control_Category.categoryFn))(Data_Array.index(v.value0)(1));
    };
    return Data_Maybe.Nothing.value;
};
var pe_namespace = function (dict) {
    return dict.pe_namespace;
};
var pe_localName = function (dict) {
    return dict.pe_localName;
};
var peIdentifierQualifiedName = new PerspectEntiteitIdentifier(function (v) {
    return new Data_Maybe.Just(v.value1);
}, function (v) {
    return v.value0;
});
var peIdentifierModelName = new PerspectEntiteitIdentifier(function (v) {
    return Data_Maybe.Nothing.value;
}, function (v) {
    return v;
});
var namespaceRegex = Data_String_Regex_Unsafe.unsafeRegex("^(model:\\w*)")(Data_String_Regex_Flags.noFlags);
var modelRegex = Data_String_Regex_Unsafe.unsafeRegex("^model:(\\w*)$")(Data_String_Regex_Flags.noFlags);
var isUserURI = Data_String_Regex.test(userUriRegEx);
var isUserEntiteitID = function (id) {
    return isUserURI(id) || isUserURI(id);
};
var isUserCurie = Data_String_Regex.test(userCurieRegEx);
var isModelName = function (s) {
    return Data_String_Regex.test(modelRegex)(s);
};
var isContainingNamespace = function (ns) {
    return function (ident) {
        return Data_String.contains(ns)(ident);
    };
};
var isInNamespace = function (a) {
    return function (b) {
        return a === b || isContainingNamespace(b)(a);
    };
};
var guardWellFormedNess = function (dictMonadThrow) {
    return function (f) {
        return function (a) {
            return Perspectives_Utilities["onNothing'"](dictMonadThrow)(Control_Monad_Eff_Exception.error("This identifier is not well formed: " + a))(f(a));
        };
    };
};
var getSecondMatch = function (regex) {
    return function (s) {
        var v = Data_String_Regex.match(regex)(s);
        if (v instanceof Data_Maybe.Just) {
            return Data_Array.unsafeIndex()(v.value0)(2);
        };
        return Data_Maybe.Nothing.value;
    };
};
var getFirstMatch = function (regex) {
    return function (s) {
        var v = Data_String_Regex.match(regex)(s);
        if (v instanceof Data_Maybe.Just) {
            return Data_Array.unsafeIndex()(v.value0)(1);
        };
        return Data_Maybe.Nothing.value;
    };
};
var escapeCouchdbDocumentName = function (s) {
    return Data_String.replaceAll(":")("%3A")(Data_String.replaceAll("$")("%24")(s));
};
var domeinURIRegex = Data_String_Regex_Unsafe.unsafeRegex("^(model:\\w*.*)\\$(\\w*)")(Data_String_Regex_Flags.noFlags);
var domeinURIQualifiedRegex = Data_String_Regex_Unsafe.unsafeRegex("^model:(\\w*)(.*)$")(Data_String_Regex_Flags.noFlags);
var isQualifiedWithDomein = function (s) {
    return Data_String_Regex.test(domeinURIQualifiedRegex)(s);
};
var deconstructNamespace = getFirstMatch(domeinURIRegex);
var deconstructModelName = getFirstMatch(namespaceRegex);
var deconstructLocalNameFromDomeinURI = getSecondMatch(domeinURIRegex);
var deconstructLocalNameFromDomeinURI_ = function (s) {
    return Data_Maybe.fromJust()(deconstructLocalNameFromDomeinURI(s));
};
var curieRegEx = Data_String_Regex_Unsafe.unsafeRegex("^(\\w+)\\:(\\w+)")(Data_String_Regex_Flags.noFlags);
var deconstructLocalNameFromCurie = getSecondMatch(curieRegEx);
var deconstructPrefix = getFirstMatch(curieRegEx);
var buitenRol = function (s) {
    var $30 = isModelName(s);
    if ($30) {
        return s + "$_buitenRol";
    };
    return s + "_buitenRol";
};
var binnenRol = function (s) {
    var $31 = isModelName(s);
    if ($31) {
        return s + "$_binnenRol";
    };
    return s + "_binnenRol";
};
module.exports = {
    deconstructPrefix: deconstructPrefix,
    deconstructLocalNameFromCurie: deconstructLocalNameFromCurie,
    deconstructLocalNameFromDomeinURI: deconstructLocalNameFromDomeinURI,
    deconstructLocalNameFromDomeinURI_: deconstructLocalNameFromDomeinURI_,
    deconstructModelName: deconstructModelName,
    deconstructNamespace: deconstructNamespace,
    guardWellFormedNess: guardWellFormedNess,
    getFirstMatch: getFirstMatch,
    getSecondMatch: getSecondMatch,
    roleIndexNr: roleIndexNr,
    escapeCouchdbDocumentName: escapeCouchdbDocumentName,
    isInNamespace: isInNamespace,
    isContainingNamespace: isContainingNamespace,
    isQualifiedWithDomein: isQualifiedWithDomein,
    ModelName: ModelName,
    QualifiedName: QualifiedName,
    PerspectEntiteitIdentifier: PerspectEntiteitIdentifier,
    pe_namespace: pe_namespace,
    pe_localName: pe_localName,
    binnenRol: binnenRol,
    buitenRol: buitenRol,
    isUserURI: isUserURI,
    isUserEntiteitID: isUserEntiteitID,
    isModelName: isModelName,
    showModelName: showModelName,
    showQualifiedName: showQualifiedName,
    peIdentifierModelName: peIdentifierModelName,
    peIdentifierQualifiedName: peIdentifierQualifiedName
};
