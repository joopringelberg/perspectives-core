// Generated by purs version 0.11.7
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Either = require("../Data.Either");
var Data_Function_Uncurried = require("../Data.Function.Uncurried");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Prelude = require("../Prelude");
var Killed = (function () {
    function Killed(value0) {
        this.value0 = value0;
    };
    Killed.create = function (value0) {
        return new Killed(value0);
    };
    return Killed;
})();
var Filled = (function () {
    function Filled(value0) {
        this.value0 = value0;
    };
    Filled.create = function (value0) {
        return new Filled(value0);
    };
    return Filled;
})();
var Empty = (function () {
    function Empty() {

    };
    Empty.value = new Empty();
    return Empty;
})();
var isKilled = function (v) {
    if (v instanceof Killed) {
        return true;
    };
    return false;
};
var isFilled = function (v) {
    if (v instanceof Filled) {
        return true;
    };
    return false;
};
var isEmpty = function (v) {
    if (v instanceof Empty) {
        return true;
    };
    return false;
};
var ffiUtil = {
    left: Data_Either.Left.create,
    right: Data_Either.Right.create,
    nothing: Data_Maybe.Nothing.value,
    just: Data_Maybe.Just.create,
    killed: Killed.create,
    filled: Filled.create,
    empty: Empty.value
};
var killVar = function (err) {
    return function (avar) {
        return $foreign._killVar(ffiUtil, err, avar);
    };
};
var putVar = function (value) {
    return function (avar) {
        return function (cb) {
            return $foreign._putVar(ffiUtil, value, avar, cb);
        };
    };
};
var readVar = function (avar) {
    return function (cb) {
        return $foreign._readVar(ffiUtil, avar, cb);
    };
};
var status = function (avar) {
    return $foreign._status(ffiUtil, avar);
};
var isEmptyVar = function ($8) {
    return Data_Functor.map(Control_Monad_Eff.functorEff)(isEmpty)(status($8));
};
var isFilledVar = function ($9) {
    return Data_Functor.map(Control_Monad_Eff.functorEff)(isFilled)(status($9));
};
var isKilledVar = function ($10) {
    return Data_Functor.map(Control_Monad_Eff.functorEff)(isKilled)(status($10));
};
var takeVar = function (avar) {
    return function (cb) {
        return $foreign._takeVar(ffiUtil, avar, cb);
    };
};
var tryPutVar = function (value) {
    return function (avar) {
        return $foreign._tryPutVar(ffiUtil, value, avar);
    };
};
var tryReadVar = function (avar) {
    return $foreign._tryReadVar(ffiUtil, avar);
};
var tryTakeVar = function (avar) {
    return $foreign._tryTakeVar(ffiUtil, avar);
};
module.exports = {
    Killed: Killed,
    Filled: Filled,
    Empty: Empty,
    takeVar: takeVar,
    tryTakeVar: tryTakeVar,
    putVar: putVar,
    tryPutVar: tryPutVar,
    readVar: readVar,
    tryReadVar: tryReadVar,
    killVar: killVar,
    status: status,
    isEmptyVar: isEmptyVar,
    isFilledVar: isFilledVar,
    isKilledVar: isKilledVar,
    isEmpty: isEmpty,
    isFilled: isFilled,
    isKilled: isKilled,
    makeVar: $foreign.makeVar,
    makeEmptyVar: $foreign.makeEmptyVar
};
