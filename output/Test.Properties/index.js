// Generated by purs version 0.11.7
"use strict";
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Aff_Console = require("../Control.Monad.Aff.Console");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Perspectives_CoreTypes = require("../Perspectives.CoreTypes");
var Perspectives_DataTypeTripleGetters = require("../Perspectives.DataTypeTripleGetters");
var Perspectives_ModelBasedTripleGetters = require("../Perspectives.ModelBasedTripleGetters");
var Perspectives_QueryCombinators = require("../Perspectives.QueryCombinators");
var Perspectives_RunMonadPerspectivesQuery = require("../Perspectives.RunMonadPerspectivesQuery");
var Perspectives_TripleGetterComposition = require("../Perspectives.TripleGetterComposition");
var Perspectives_TripleGetterConstructors = require("../Perspectives.TripleGetterConstructors");
var Prelude = require("../Prelude");
var Test_TestEffects = require("../Test.TestEffects");
var viewDef = "model:Perspectives$view";
var rolIsVerplichtDef = "model:Perspectives$Rol$isVerplicht";
var rolDef = "model:Perspectives$Rol";
var psp = "model:Perspectives";
var log = function ($42) {
    return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Aff.monadAff)(Control_Monad_Aff_Console.log($42));
};
var test = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("=========================Test.Properties================================"))(function () {
    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_DataTypeTripleGetters.iedereRolInContextM))(function (v) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("rolDef ## iedereRolInContextM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v)))(function () {
            return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_DataTypeTripleGetters.iedereRolInContextM)(Perspectives_DataTypeTripleGetters.bindingM)))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolDef ## iedereRolInContextM >-> bindingM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v1)))(function () {
                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_DataTypeTripleGetters.iedereRolInContextM)(Perspectives_DataTypeTripleGetters.bindingM))(Perspectives_DataTypeTripleGetters.contextM)))(function (v2) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolDef ## iedereRolInContextM >-> bindingM >-> contextM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v2)))(function () {
                            return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_DataTypeTripleGetters.iedereRolInContextM)(Perspectives_DataTypeTripleGetters.identityM)))(function (v3) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolDef ## iedereRolInContextM >-> identity = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v3)))(function () {
                                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_DataTypeTripleGetters.iedereRolInContextM)(Perspectives_DataTypeTripleGetters.bindingM))(Perspectives_DataTypeTripleGetters.contextM))(Perspectives_DataTypeTripleGetters.contextTypeM)))(function (v4) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolDef ## iedereRolInContextM >-> identity >-> contextTypeM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v4)))(function () {
                                            return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_DataTypeTripleGetters.buitenRolM))(function (v5) {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolDef ## buitenRolM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v5)))(function () {
                                                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_DataTypeTripleGetters.typeVanIedereRolInContextM))(function (v6) {
                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolDef ## typeVanIedereRolInContextM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v6)))(function () {
                                                            return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_DataTypeTripleGetters.iedereRolInContextM)(Perspectives_DataTypeTripleGetters.rolTypeM)))(function (v7) {
                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolDef ## iedereRolInContextM >-> rolTypeM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v7)))(function () {
                                                                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolIsVerplichtDef)(Perspectives_ModelBasedTripleGetters.rolIsVerplichtM))(function (v8) {
                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolIsVerplichtDef ## rolIsVerplichtM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v8)))(function () {
                                                                            return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_DataTypeTripleGetters.labelM))(function (v9) {
                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolDef ## labelM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v9)))(function () {
                                                                                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolIsVerplichtDef)(Perspectives_ModelBasedTripleGetters.rangeDefM))(function (v10) {
                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolIsVerplichtDef ## rangeDefM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v10)))(function () {
                                                                                            return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_ModelBasedTripleGetters.hasLabelM))(function (v11) {
                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" rolDef ## hasLabelM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v11)))(function () {
                                                                                                    return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(viewDef)(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_DataTypeTripleGetters.iedereRolInContextM)(Perspectives_ModelBasedTripleGetters.hasBindingM)))(function (v12) {
                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log(" viewDef ## iedereRolInContextM >-> hasBindingM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v12)))(function () {
                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("========================= TESTING TO DEBUG MODEL LOADING ================================"))(function () {
                                                                                                                return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(psp)(Perspectives_DataTypeTripleGetters.typeVanIedereRolInContextM))(function (v13) {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("psp ## typeVanIedereRolInContextM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v13)))(function () {
                                                                                                                        return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(psp)(Perspectives_QueryCombinators.ignoreCache(Perspectives_TripleGetterConstructors.constructRolGetter("model:Perspectives$rolInContext"))))(function (v14) {
                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("psp ## (constructRolGetter 'model:Perspectives$rolInContext') = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v14)))(function () {
                                                                                                                                return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(psp)(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_QueryCombinators.ignoreCache(Perspectives_TripleGetterConstructors.constructRolGetter("model:Perspectives$rolInContext")))(Perspectives_DataTypeTripleGetters.bindingM)))(function (v15) {
                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("psp ## (constructRolGetter 'model:Perspectives$rolInContext') >-> bindingM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v15)))(function () {
                                                                                                                                        return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(rolDef)(Perspectives_TripleGetterConstructors.constructRolGetter("model:Perspectives$rolInContext")))(function (v16) {
                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("rolDef ## (constructRolGetter 'model:Perspectives$rolInContext') = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v16)))(function () {
                                                                                                                                                return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(psp)(Perspectives_QueryCombinators.ignoreCache(Perspectives_DataTypeTripleGetters.iedereRolInContextM)))(function (v17) {
                                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("psp ## iedereRolInContextM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v17)))(function () {
                                                                                                                                                        return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery(psp)(Perspectives_TripleGetterComposition.composeTripleGetters(Perspectives_QueryCombinators.ignoreCache(Perspectives_DataTypeTripleGetters.iedereRolInContextM))(Perspectives_DataTypeTripleGetters.bindingM)))(function (v18) {
                                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("psp ## iedereRolInContextM >-> bindingM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v18)))(function () {
                                                                                                                                                                return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery("model:Perspectives$rolInContext1")(Perspectives_DataTypeTripleGetters.bindingM))(function (v19) {
                                                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(log("'model:Perspectives$rolInContext1' ## bindingM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v19)))(function () {
                                                                                                                                                                        return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(Perspectives_RunMonadPerspectivesQuery.runQuery("model:Perspectives$rolInContext1")(Perspectives_DataTypeTripleGetters.rolTypeM))(function (v20) {
                                                                                                                                                                            return log("'model:Perspectives$rolInContext1' ## rolTypeM = " + Data_Show.show(Perspectives_CoreTypes.showTriple)(v20));
                                                                                                                                                                        });
                                                                                                                                                                    });
                                                                                                                                                                });
                                                                                                                                                            });
                                                                                                                                                        });
                                                                                                                                                    });
                                                                                                                                                });
                                                                                                                                            });
                                                                                                                                        });
                                                                                                                                    });
                                                                                                                                });
                                                                                                                            });
                                                                                                                        });
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
module.exports = {
    rolDef: rolDef,
    rolIsVerplichtDef: rolIsVerplichtDef,
    viewDef: viewDef,
    psp: psp,
    test: test,
    log: log
};
