// Generated by purs version 0.11.7
"use strict";
var Control_Apply = require("../Control.Apply");
var Data_Array = require("../Data.Array");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Data_Generic_Rep = require("../Data.Generic.Rep");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show");
var Data_Identity = require("../Data.Identity");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_Symbol = require("../Data.Symbol");
var Prelude = require("../Prelude");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String");
var URI_Path_Segment = require("../URI.Path.Segment");
var Path = function (x) {
    return x;
};
var semigroupPath = Data_Semigroup.semigroupArray;
var print = function (v) {
    if (Data_Array["null"](v)) {
        return "";
    };
    if (Data_Boolean.otherwise) {
        return "/" + Data_String.joinWith("/")(Data_Functor.map(Data_Functor.functorArray)(URI_Path_Segment.unsafeSegmentToString)(v));
    };
    throw new Error("Failed pattern match at URI.Path line 33, column 1 - line 33, column 22: " + [ v.constructor.name ]);
};
var parser = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Path)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/"))(URI_Path_Segment.parseSegment)));
var ordPath = Data_Ord.ordArray(URI_Path_Segment.ordPathSegment);
var monoidPath = Data_Monoid.monoidArray;
var genericPath = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showPath = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericPath)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showArray(URI_Path_Segment.showPathSegment)))(new Data_Symbol.IsSymbol(function () {
    return "Path";
}))));
var eqPath = Data_Eq.eqArray(URI_Path_Segment.eqPathSegment);
module.exports = {
    Path: Path,
    parser: parser,
    print: print,
    eqPath: eqPath,
    ordPath: ordPath,
    semigroupPath: semigroupPath,
    monoidPath: monoidPath,
    genericPath: genericPath,
    showPath: showPath
};
