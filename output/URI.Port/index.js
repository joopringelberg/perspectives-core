// Generated by purs version 0.11.7
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Data_Array = require("../Data.Array");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Identity = require("../Data.Identity");
var Data_Int = require("../Data.Int");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Global = require("../Global");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String");
var Text_Parsing_Parser_Token = require("../Text.Parsing.Parser.Token");
var Port = function (x) {
    return x;
};
var toInt = function (v) {
    return v;
};
var showPort = new Data_Show.Show(function (v) {
    return "(Port.unsafeFromInt " + (Data_Show.show(Data_Show.showInt)(v) + ")");
});
var print = function (v) {
    return ":" + Data_Show.show(Data_Show.showInt)(v);
};
var parser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String.fromCharArray)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity)))))(function (v) {
    var v1 = Data_Int.fromNumber(Global.readInt(10)(v));
    if (v1 instanceof Data_Maybe.Just) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1.value0);
    };
    return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected a valid port number");
});
var ordPort = Data_Ord.ordInt;
var fromInt = function (i) {
    if (i >= 0 && i <= 65535) {
        return new Data_Maybe.Just(i);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at URI.Port line 37, column 1 - line 37, column 27: " + [ i.constructor.name ]);
};
var unsafeFromInt = function (i) {
    var v = fromInt(i);
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Partial_Unsafe.unsafeCrashWith("Port value " + (Data_Show.show(Data_Show.showInt)(i) + " is out of range"));
    };
    throw new Error("Failed pattern match at URI.Port line 49, column 3 - line 53, column 1: " + [ v.constructor.name ]);
};
var eqPort = Data_Eq.eqInt;
module.exports = {
    toInt: toInt,
    fromInt: fromInt,
    unsafeFromInt: unsafeFromInt,
    parser: parser,
    print: print,
    eqPort: eqPort,
    ordPort: ordPort,
    showPort: showPort
};
