// Generated by purs version 0.11.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Data_Identity = require("../Data.Identity");
var Data_Semigroup = require("../Data.Semigroup");
var Prelude = require("../Prelude");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String");
var Text_Parsing_Parser_Token = require("../Text.Parsing.Parser.Token");
var emptyDef = (function () {
    var op$prime = function (dictMonad) {
        return Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~" ]);
    };
    return {
        commentStart: "",
        commentEnd: "",
        commentLine: "",
        nestedComments: true,
        identStart: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("_")),
        identLetter: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "_", "'" ])),
        opStart: op$prime(Data_Identity.monadIdentity),
        opLetter: op$prime(Data_Identity.monadIdentity),
        reservedOpNames: [  ],
        reservedNames: [  ],
        caseSensitive: true
    };
})();
var haskellStyle = (function () {
    var op$prime = function (dictMonad) {
        return Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~" ]);
    };
    var v = Text_Parsing_Parser_Token.unGenLanguageDef(emptyDef);
    var $6 = {};
    for (var $7 in v) {
        if ({}.hasOwnProperty.call(v, $7)) {
            $6[$7] = v[$7];
        };
    };
    $6.commentStart = "{-";
    $6.commentEnd = "-}";
    $6.commentLine = "--";
    $6.nestedComments = true;
    $6.identStart = Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity);
    $6.identLetter = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "_", "'" ]));
    $6.opStart = op$prime(Data_Identity.monadIdentity);
    $6.opLetter = op$prime(Data_Identity.monadIdentity);
    $6.reservedOpNames = [  ];
    $6.reservedNames = [  ];
    $6.caseSensitive = true;
    return $6;
})();
var haskell98Def = (function () {
    var v = Text_Parsing_Parser_Token.unGenLanguageDef(haskellStyle);
    var $9 = {};
    for (var $10 in v) {
        if ({}.hasOwnProperty.call(v, $10)) {
            $9[$10] = v[$10];
        };
    };
    $9.reservedOpNames = [ "::", "..", "=", "\\", "|", "<-", "->", "@", "~", "=>" ];
    $9.reservedNames = [ "let", "in", "case", "of", "if", "then", "else", "data", "type", "class", "default", "deriving", "do", "import", "infix", "infixl", "infixr", "instance", "module", "newtype", "where", "primitive" ];
    return $9;
})();
var haskellDef = (function () {
    var $13 = {};
    for (var $14 in haskell98Def) {
        if ({}.hasOwnProperty.call(haskell98Def, $14)) {
            $13[$14] = haskell98Def[$14];
        };
    };
    $13.identLetter = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(haskell98Def.identLetter)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("#"));
    $13.reservedNames = Data_Semigroup.append(Data_Semigroup.semigroupArray)(haskell98Def.reservedNames)([ "foreign", "import", "export", "primitive", "_ccall_", "_casm_", "forall" ]);
    return $13;
})();
var haskell = Text_Parsing_Parser_Token.makeTokenParser(Data_Identity.monadIdentity)(haskellDef);
var javaStyle = (function () {
    var v = Text_Parsing_Parser_Token.unGenLanguageDef(emptyDef);
    var $16 = {};
    for (var $17 in v) {
        if ({}.hasOwnProperty.call(v, $17)) {
            $16[$17] = v[$17];
        };
    };
    $16.commentStart = "/*";
    $16.commentEnd = "*/";
    $16.commentLine = "//";
    $16.nestedComments = true;
    $16.identStart = Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity);
    $16.identLetter = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "_", "'" ]));
    $16.reservedNames = [  ];
    $16.reservedOpNames = [  ];
    $16.caseSensitive = false;
    return $16;
})();
module.exports = {
    haskellDef: haskellDef,
    haskell: haskell,
    emptyDef: emptyDef,
    haskellStyle: haskellStyle,
    javaStyle: javaStyle
};
