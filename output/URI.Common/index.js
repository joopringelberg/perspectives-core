// Generated by purs version 0.11.7
"use strict";
var Control_Alt = require("../Control.Alt");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Category = require("../Control.Category");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class");
var Control_Monad_Except = require("../Control.Monad.Except");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans");
var Control_Monad_State = require("../Control.Monad.State");
var Control_Monad_State_Class = require("../Control.Monad.State.Class");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Generic_Rep = require("../Data.Generic.Rep");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Identity = require("../Data.Identity");
var Data_Newtype = require("../Data.Newtype");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Data_String_NonEmpty = require("../Data.String.NonEmpty");
var Data_Symbol = require("../Data.Symbol");
var Global = require("../Global");
var Partial_Unsafe = require("../Partial.Unsafe");
var Prelude = require("../Prelude");
var Text_Parsing_Parser = require("../Text.Parsing.Parser");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String");
var Text_Parsing_Parser_Token = require("../Text.Parsing.Parser.Token");
var URIPartParseError = function (x) {
    return x;
};
var wrapParser = function (dictMonad) {
    return function (parseA) {
        return function (p) {
            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad))))(function (v) {
                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)))(Data_Newtype.un(Text_Parsing_Parser.newtypeParserT)(Text_Parsing_Parser.ParserT)(p))(function (v1) {
                    var v2 = parseA(v1);
                    if (v2 instanceof Data_Either.Left) {
                        return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)))(new Text_Parsing_Parser.ParseError(v2.value0, v.value1));
                    };
                    if (v2 instanceof Data_Either.Right) {
                        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)))(v2.value0);
                    };
                    throw new Error("Failed pattern match at URI.Common line 54, column 3 - line 56, column 21: " + [ v2.constructor.name ]);
                });
            });
        };
    };
};
var subDelims = Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "!", "$", "&", "'", "(", ")", "*", "+", ";", "=", "," ]);
var printEncoded = function (p) {
    return function (s) {
        var simpleChar = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String.singleton)(p);
        var encodedChar = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($27) {
            return Global["encodeURIComponent"](Data_String.singleton($27));
        })(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity));
        var parse = Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String.joinWith(""))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(simpleChar)(encodedChar))))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity));
        return Data_Either.either(Data_Function["const"](s))(Control_Category.id(Control_Category.categoryFn))(Text_Parsing_Parser.runParser(s)(parse));
    };
};
var printEncoded$prime = function (p) {
    return function ($28) {
        return Data_String_NonEmpty.unsafeFromString()(printEncoded(p)(Data_String_NonEmpty.toString($28)));
    };
};
var pctEncoded = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("%"))(function (v) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.hexDigit(Data_Identity.monadIdentity))(function (v1) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.hexDigit(Data_Identity.monadIdentity))(function (v2) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(Data_String_NonEmpty.singleton(v))(Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(Data_String_NonEmpty.singleton(v1))(Data_String_NonEmpty.singleton(v2))));
        });
    });
});
var ordURIPartParseError = Data_Ord.ordString;
var newtypeURIPartParseError = new Data_Newtype.Newtype(function (n) {
    return n;
}, URIPartParseError);
var genericURIPartParseError = new Data_Generic_Rep.Generic(function (x) {
    return x;
}, function (x) {
    return x;
});
var showURIPartParseError = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericURIPartParseError)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
    return "URIPartParseError";
}))));
var eqURIPartParseError = Data_Eq.eqString;
var decodeURIComponent$prime = function ($29) {
    return Data_String_NonEmpty.unsafeFromString()(Global["decodeURIComponent"](Data_String_NonEmpty.toString($29)));
};
var alpha = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function (c) {
    return c >= "a" && c <= "z" || c >= "A" && c <= "Z";
});
var alphaNum = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(alpha)(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity));
var unreserved = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(alphaNum)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("-")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(".")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("_")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("~"));
module.exports = {
    URIPartParseError: URIPartParseError,
    wrapParser: wrapParser,
    alpha: alpha,
    alphaNum: alphaNum,
    unreserved: unreserved,
    pctEncoded: pctEncoded,
    subDelims: subDelims,
    printEncoded: printEncoded,
    "printEncoded'": printEncoded$prime,
    "decodeURIComponent'": decodeURIComponent$prime,
    eqURIPartParseError: eqURIPartParseError,
    ordURIPartParseError: ordURIPartParseError,
    newtypeURIPartParseError: newtypeURIPartParseError,
    genericURIPartParseError: genericURIPartParseError,
    showURIPartParseError: showURIPartParseError
};
