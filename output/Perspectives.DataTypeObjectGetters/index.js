// Generated by purs version 0.11.7
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Data_Array = require("../Data.Array");
var Data_Array_Partial = require("../Data.Array.Partial");
var Data_Eq = require("../Data.Eq");
var Data_Function = require("../Data.Function");
var Data_Maybe = require("../Data.Maybe");
var Data_StrMap = require("../Data.StrMap");
var Partial_Unsafe = require("../Partial.Unsafe");
var Perspectives_ContextAndRole = require("../Perspectives.ContextAndRole");
var Perspectives_ContextRolAccessors = require("../Perspectives.ContextRolAccessors");
var Perspectives_CoreTypes = require("../Perspectives.CoreTypes");
var Perspectives_Effects = require("../Perspectives.Effects");
var Perspectives_EntiteitAndRDFAliases = require("../Perspectives.EntiteitAndRDFAliases");
var Perspectives_ObjectsGetterComposition = require("../Perspectives.ObjectsGetterComposition");
var Prelude = require("../Prelude");
var typeVanIedereRolInContext = Perspectives_ContextRolAccessors.getContextMember(function (context1) {
    return Data_StrMap.keys(Perspectives_ContextAndRole.context_rolInContext(context1));
});
var toSingle = function (dictPartial) {
    return function (og) {
        return function (id) {
            return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Aff.bindAff))(og(id))(function (v) {
                return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Aff.applicativeAff))(Data_Array_Partial.head(dictPartial)(v));
            });
        };
    };
};
var rolType = Perspectives_ContextRolAccessors.getRolMember(function (rol) {
    return [ Perspectives_ContextAndRole.rol_pspType(rol) ];
});
var propertyTypen = Perspectives_ContextRolAccessors.getRolMember(function (rol) {
    return Data_StrMap.keys(Perspectives_ContextAndRole.rol_properties(rol));
});
var label = Perspectives_ContextRolAccessors.getContextMember(function (context1) {
    return [ Perspectives_ContextAndRole.context_displayName(context1) ];
});
var internePropertyTypen = Perspectives_ContextRolAccessors.getContextMember(function (context1) {
    return Data_StrMap.keys(Perspectives_ContextAndRole.rol_properties(Perspectives_ContextAndRole.context_binnenRol(context1)));
});
var iedereRolInContext = Perspectives_ContextRolAccessors.getContextMember(function (context1) {
    return Data_Array.nub(Data_Eq.eqString)(Control_Bind.join(Control_Bind.bindArray)(Data_StrMap.values(Perspectives_ContextAndRole.context_rolInContext(context1))));
});
var contextType = Perspectives_ContextRolAccessors.getContextMember(function (context1) {
    return [ Perspectives_ContextAndRole.context_pspType(context1) ];
});
var context = Perspectives_ContextRolAccessors.getRolMember(function (rol) {
    return [ Perspectives_ContextAndRole.rol_context(rol) ];
});
var buitenRol$prime = Perspectives_ContextRolAccessors["getContextMember'"](function (c) {
    return Perspectives_ContextAndRole.context_buitenRol(c);
});
var buitenRol = Perspectives_ContextRolAccessors.getContextMember(function (c) {
    return [ Perspectives_ContextAndRole.context_buitenRol(c) ];
});
var binding = Perspectives_ContextRolAccessors.getRolMember(function (rol) {
    return Data_Maybe.maybe([  ])(Data_Array.singleton)(Perspectives_ContextAndRole.rol_binding(rol));
});
var binding$prime = toSingle()(binding);
var rolBindingDef = Perspectives_ObjectsGetterComposition.unionOfObjects(binding)(context);
module.exports = {
    toSingle: toSingle,
    contextType: contextType,
    buitenRol: buitenRol,
    "buitenRol'": buitenRol$prime,
    iedereRolInContext: iedereRolInContext,
    typeVanIedereRolInContext: typeVanIedereRolInContext,
    propertyTypen: propertyTypen,
    internePropertyTypen: internePropertyTypen,
    label: label,
    rolType: rolType,
    binding: binding,
    rolBindingDef: rolBindingDef,
    context: context,
    "binding'": binding$prime
};
