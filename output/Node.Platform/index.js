// Generated by purs version 0.11.7
"use strict";
var Data_Eq = require("../Data.Eq");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ordering = require("../Data.Ordering");
var Data_Show = require("../Data.Show");
var Prelude = require("../Prelude");
var AIX = (function () {
    function AIX() {

    };
    AIX.value = new AIX();
    return AIX;
})();
var Darwin = (function () {
    function Darwin() {

    };
    Darwin.value = new Darwin();
    return Darwin;
})();
var FreeBSD = (function () {
    function FreeBSD() {

    };
    FreeBSD.value = new FreeBSD();
    return FreeBSD;
})();
var Linux = (function () {
    function Linux() {

    };
    Linux.value = new Linux();
    return Linux;
})();
var OpenBSD = (function () {
    function OpenBSD() {

    };
    OpenBSD.value = new OpenBSD();
    return OpenBSD;
})();
var SunOS = (function () {
    function SunOS() {

    };
    SunOS.value = new SunOS();
    return SunOS;
})();
var Win32 = (function () {
    function Win32() {

    };
    Win32.value = new Win32();
    return Win32;
})();
var Android = (function () {
    function Android() {

    };
    Android.value = new Android();
    return Android;
})();
var toString = function (v) {
    if (v instanceof AIX) {
        return "aix";
    };
    if (v instanceof Darwin) {
        return "darwin";
    };
    if (v instanceof FreeBSD) {
        return "freebsd";
    };
    if (v instanceof Linux) {
        return "linux";
    };
    if (v instanceof OpenBSD) {
        return "openbsd";
    };
    if (v instanceof SunOS) {
        return "sunos";
    };
    if (v instanceof Win32) {
        return "win32";
    };
    if (v instanceof Android) {
        return "android";
    };
    throw new Error("Failed pattern match at Node.Platform line 20, column 1 - line 20, column 31: " + [ v.constructor.name ]);
};
var showPlatform = new Data_Show.Show(function (v) {
    if (v instanceof AIX) {
        return "AIX";
    };
    if (v instanceof Darwin) {
        return "Darwin";
    };
    if (v instanceof FreeBSD) {
        return "FreeBSD";
    };
    if (v instanceof Linux) {
        return "Linux";
    };
    if (v instanceof OpenBSD) {
        return "OpenBSD";
    };
    if (v instanceof SunOS) {
        return "SunOS";
    };
    if (v instanceof Win32) {
        return "Win32";
    };
    if (v instanceof Android) {
        return "Android";
    };
    throw new Error("Failed pattern match at Node.Platform line 43, column 1 - line 43, column 39: " + [ v.constructor.name ]);
});
var fromString = function (v) {
    if (v === "aix") {
        return new Data_Maybe.Just(AIX.value);
    };
    if (v === "darwin") {
        return new Data_Maybe.Just(Darwin.value);
    };
    if (v === "freebsd") {
        return new Data_Maybe.Just(FreeBSD.value);
    };
    if (v === "linux") {
        return new Data_Maybe.Just(Linux.value);
    };
    if (v === "openbsd") {
        return new Data_Maybe.Just(OpenBSD.value);
    };
    if (v === "sunos") {
        return new Data_Maybe.Just(SunOS.value);
    };
    if (v === "win32") {
        return new Data_Maybe.Just(Win32.value);
    };
    if (v === "android") {
        return new Data_Maybe.Just(Android.value);
    };
    return Data_Maybe.Nothing.value;
};
var eqPlatform = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof AIX && y instanceof AIX) {
            return true;
        };
        if (x instanceof Darwin && y instanceof Darwin) {
            return true;
        };
        if (x instanceof FreeBSD && y instanceof FreeBSD) {
            return true;
        };
        if (x instanceof Linux && y instanceof Linux) {
            return true;
        };
        if (x instanceof OpenBSD && y instanceof OpenBSD) {
            return true;
        };
        if (x instanceof SunOS && y instanceof SunOS) {
            return true;
        };
        if (x instanceof Win32 && y instanceof Win32) {
            return true;
        };
        if (x instanceof Android && y instanceof Android) {
            return true;
        };
        return false;
    };
});
var ordPlatform = new Data_Ord.Ord(function () {
    return eqPlatform;
}, function (x) {
    return function (y) {
        if (x instanceof AIX && y instanceof AIX) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof AIX) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof AIX) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Darwin && y instanceof Darwin) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Darwin) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Darwin) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof FreeBSD && y instanceof FreeBSD) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof FreeBSD) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof FreeBSD) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Linux && y instanceof Linux) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Linux) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Linux) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof OpenBSD && y instanceof OpenBSD) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof OpenBSD) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof OpenBSD) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof SunOS && y instanceof SunOS) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof SunOS) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof SunOS) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Win32 && y instanceof Win32) {
            return Data_Ordering.EQ.value;
        };
        if (x instanceof Win32) {
            return Data_Ordering.LT.value;
        };
        if (y instanceof Win32) {
            return Data_Ordering.GT.value;
        };
        if (x instanceof Android && y instanceof Android) {
            return Data_Ordering.EQ.value;
        };
        throw new Error("Failed pattern match at Node.Platform line 54, column 8 - line 54, column 36: " + [ x.constructor.name, y.constructor.name ]);
    };
});
module.exports = {
    AIX: AIX,
    Darwin: Darwin,
    FreeBSD: FreeBSD,
    Linux: Linux,
    OpenBSD: OpenBSD,
    SunOS: SunOS,
    Win32: Win32,
    Android: Android,
    toString: toString,
    fromString: fromString,
    showPlatform: showPlatform,
    eqPlatform: eqPlatform,
    ordPlatform: ordPlatform
};
