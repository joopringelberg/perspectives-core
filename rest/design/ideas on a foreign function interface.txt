FOREIGN MODULES

FUNCTIONS, MARSHALLING
-- | Fn2 describes a(n ordinary javascript) function of two arguments
data Fn2 :: Type -> Type -> Type -> Type

-- | Note that behind the :: the *kind* of Fn2 is given. As it is a type constructor, it 
-- | constructs a new type from three arguments: the two arguments and the result value. 
-- | the fourth 'Type' parameter of the import statement indicates the constructed type.
foreign import data Fn2 :: Type -> Type -> Type -> Type

-- | Create a function of two arguments from a curried function
mkFn2 :: forall a b c. (a -> b -> c) -> Fn2 a b c

-- | Apply a function of two arguments. That is, create a curried version of an uncurried Fn2 function.
runFn2 :: forall a b c. Fn2 a b c -> a -> b -> c

type ModuleName = String
type FunctionName = String

-- | The implementation of this function uses javascript 'require' to import a module and take a function from it.
requireFn2 :: ModuleName -> FunctionName -> (Fn2 String String String)

Maar liever zouden we direct een gecurriede versie daarvan maken:

type F2 = String -> String -> String

requireF2 :: ModuleName -> FunctionName -> F2
requireF2 m f = runFn2 (requireFn2 m f)

THE SAME STUFF, BUT IN AFF

type F2Aff e = String -> String -> Aff e String


exports._getPassword = function (onError, onSuccess) {
  var cancel = callRelayServer(function (err, res) {
    if (err) {
      onError(err);
    } else {
      onSuccess(res);
    }
  });
  return function (cancelError, onCancelerError, onCancelerSuccess) {
    cancel();
    onCancelerSuccess();
  };
};

Wat hier niet klopt, is het aantal argumenten van de service.
foreign import _getPassword :: EffectFnAff String

getPassword :: Aff String
getPassword = fromEffectFnAff _getPassword


REDUCE
1. Alle properties hebben (Array String) als type.
2. Een functie over properties is derhalve in termen van strings. Alle casting zal in de functies zelf moeten gebeuren, efficiency overwegingen terzijde geschoven.
3. Ik ontwerp dit voor functionele properties.
4. Dat betekent dat alleen de ariteit nog de types van functies op properties van elkaar onderscheidt.
5. Een functie als LeftReduce of RightReduce gebruikt een functie met twee argumenten. 

git tag -a v1.0.0 -m "Version 1.0.0"