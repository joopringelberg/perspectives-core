BINNEN- EN BUITENROL

Elke context heeft een binnen- en buitenrol. De parser van CRL maakt die automatisch aan. Externe properties komen op de buitenrol, interne op de binnenrol en dat gaat automatisch.

Voor elk type context moet de modelleur daarom een //beschrijving// geven van de binnenrol en de buitenrol. Dat doet hij door de rol $binnenRolBeschrijving te binden aan een context van type psp:Rol (en ook zo voor $buitenRolBeschrijving). Een context van type psp:Rol is uiteraard de beschrijving van een Rol, oftewel een type Rol!

Omdat psp:Context zijn eigen type is, heeft model:Perspectives 贸贸k voor psp:Context een binding voor $binnenRolBeschrijving en $buitenRolBeschrijving. Maar die worden ontleend aan het prototype van psp:Context, en dat is psp:ContextPrototype. Dit prototype wordt veel gebruikt in model:Perspectives.

Maar in psp:Context moeten we natuurlijk 贸贸k de *definitie* van deze rollen opnemen. Dus heeft psp:Context twee bindingen voor $rolInContext:
	* psp:Context$binnenRolBeschrijving (impliciet: $binnenRolBeschrijving)
	* psp:Context$buitenRolBeschrijving (impliciet: $buitenRolBeschrijving)

psp:Context - de meest algemene Context - heeft zelf geen properties. Dus beide definities zijn kort. Ze geven alleen aan dat beide rollen functioneel en verplicht zijn en gebonden moeten worden aan een psp:Rol. Ze specificeren geen properties.

1. De parser geeft de binnenrol van een context als type de naam van het type van de context, gevolgd door $binnenRolBeschrijving.
Dat klopt. Immers, het type van de context zal een binding hebben voor de rol psp:Context$binnenRolBeschrijving. Deze binding is de definitie van een rol (dus het is een context met type psp:Rol). De lokale naam van deze definitie is **per conventie** altijd $binnenRolBeschrijving. De gekwalificeerde naam is daarom <naam van het contexttype>$binnenRolBeschrijving.

Dat levert dus het volgende patroon op:

	psp:Context psp:Rol
	$binnenRolBeschrijving =>
		psp:Rol $binnenRolBeschrijving
			extern $isFunctioneel = true
			$mogelijkeBinding => psp:Rol

Altijd is de rol $binnenRolBeschrijving gebonden aan een expressie 'psp:Rol $binnenRolBeschrijving'.

Oftewel, *een* binnenRolBeschrijving is altijd gebonden aan de *vaste* rol 'psp:Rol$binnenRolBeschrijving'.

Merk op dat hier een kwetsbaarheid schuilt: de modelleur zou een andere naam kunnen kiezen voor de binding van psp:Context$binnenRolBeschrijving.
Dit wordt gecontroleerd door de TypeDefChecker, omdat beide rollen verplicht zijn. Gebruikt de modelleur een andere naam, dan meldt de TypeDefChecker dat hij een verplichte rol mist en een niet gedefinieerde rol vindt.
Misschien kan ik het automatisch hernoemen in de ContextRoleParser, maar dan ontstaat de situatie dat in de file een naam staat die niet in de interne representatie gebruikt wordt.
Dat doe ik niet.

Overigens is er geen garantie dat het type van de context inderdaad een binnenRolBeschrijving heeft, als de parser deze typeverwijzing maakt!

2. Hetzelfde geldt voor de buitenrol. Deze krijgt ook als type de lokale naam $buitenRolBeschrijving, gekwalificeerd met de namespace van het type van de context.