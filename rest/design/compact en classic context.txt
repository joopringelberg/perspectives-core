COMPACT CONTEXT EN CLASSIC CONTEXT

Een CompactContext verenigt de buitenrol, binnenrol en een context in één record. Voor Purescript is dit onzichtbaar en bestaan de drie datastructuren nog steeds. Om dit te hanteren heb ik een interface van foreign functions opgetrokken die een CompactContext herkent en als die bevraagd wordt op context, binnen- of buitenrol, het record weer teruggeeft. Purescript weet dus niet anders dan dat hij een newtype van een bepaalde vorm terugkrijgt na b.v. de toepassing van de functie context_buitenRol op een compacte context. For all practical purposes is die compacte context dan een BuitenRol.

Deze representatie heeft beperkingen en consequenties.
1. Het is niet meer mogelijk een binnenRol of buitenRol te benaderen en dan zijn properties op te vragen.
2. De binding van zowel een binnenRol als een buitenRol is Nothing. 
3. Het is niet meer mogelijk de waarde van een externe property op te vragen via de binnenRol van een context.
4. Last, but not least, een context of rol mag niet meer benaderd worden met dot-notatie of met pattern matching. Voor elke property bestaat een functie.

5. Een CompactContext dient bij creatie in resourceDefinitions tweemaal te worden opgeslagen: éénmaal onder zijn contextnaam, éénmaal onder diezelfde naam gevolgd door "_buitenRol". Hiertoe hebben we de functie storeCompactContextInResourceDefinitions in Perspectives.Resource.
6. Een CompacteContext wordt in couchdb opgeslagen onder zijn "_buitenRol" naam.
7. Als een buitenRol wordt opgehaald uit couchdb en dat blijkt een CompactContext te zijn, wordt hij in resourceDefinitions óók opgeslagen onder zijn contextnaam (dus zonder "_buitenRol").

Ad 1. De properties van een binnenRol en buitenRol enumereren.
Om toch in staat te zijn om de interne en externe properties van een context te enumeren, zijn er twee functies context_publicProperties en context_privateProperties gemaakt. Deze hebben niet dezelfde signatuur:

context_publicProperties :: forall e.
  PerspectContext
  -> Aff (DomeinFileEffects (st :: ST ResourceDefinitions, prd :: PROPDEFS | e)) (StrMap PropertyValueWithComments)
context_privateProperties :: PerspectContext -> StrMap PropertyValueWithComments

Immers, de externe properties van een context resideren voor een klassieke context in zijn buitenrol. Die moet mogelijkerwijs nog worden opgevraagd uit couchdb, vandaar dat het een asynchrone operatie in Aff is.
De interne properties van een context daarentegen zijn voor zowel een klassieke als een compacte context direct uit de beschikbare representatie van de context op te vragen.

Ad 2. Voor een buitenRol is Nothing een adequate waarde als binding, voor een binnenRol niet. Dat zou immers de buitenRol moeten zijn. We weten echter niet of een record door Purescript als binnenRol of als buitenRol benaderd wordt, als de operator 'binding' toegepast wordt op het record! Om dat te compenseren hebben we de functie context_BinnenRolBinding gemaakt. Deze functie geeft voor een klassieke context de (ID van de) buitenRol terug, voor een compacte context de (ID van de) context zelf. Merk op dat de buitenRol van een compacte context óók de context zelf teruggeeft! Deze functie hoeft derhalve niet als foreign functie te worden geïmplementeerd om een gevalsonderscheiding te maken.
Uiteraard kan de modelleur gewoon de buitenRol opvragen van een context, als hij die wil benaderen...

Een use case die zich kan voordoen, is: de binnenRol is in een Actie gebonden aan het lijdend voorwerp. Het is nu niet mogelijk om de binding van dat lijdend voorwerp op te vragen en zo de buitenRol te verkrijgen. In plaats daarvan kan de gebruiker de query "context >-> buitenRol" toepassen.

Ad 4. Als we deze beperking alleen beschouwen vanuit het verschil tussen klassieke en compacte context, is hij te streng. Immers, alleen voor het opvragen van de context (van een rol) en de binnenRol en buitenRol is er een verschil tussen een klassieke en een compacte context. Maar beide vormen van context staan nu toe dat een veld (van het record) niet direct bij aanmaak van het record opgenomen hoeft te worden. Hiermee ontstaat de mogelijkheid om contexten precies op maat en zo zuinig mogelijk te representeren.
Bijvoorbeeld: een context zonder externe properties kan gemaakt worden zonder het veld 'externalProperties'.

CONCLUSIE
Al met al zijn dit flink wat nadelen. Ik heb besloten om deze verandering terug te draaien. CompactContext wordt geen onderdeel van Perspectives. We handhaven we de functionele interface, zodat niet alle velden van een Context of Rol verplicht zijn.