SYNTAX VOOR CONTEXT: INSTANTIES EN MODELTYPEN
Context Aangifte

Dit is gelijkwaardig aan:

Aangifte rdf:type psp:Context

Maar nu hebben we nog in het midden gelaten of dit een MetaType, een ModelType, of een instantie is!

ContextType Aangifte

is:

Aangifte psp:type psp:ContextType
Aangifte rdf:type psp:Context

MetaType ContextType

is dan gelijkwaardig aan:

ContextType psp:type psp:MetaType
ContextType rdf:type psp:Context

Nu hebben we over psp:ContextType niets te melden dat niet al in de basismodellering zit, te weten:
- dat er een standaard rol :context_Rol is
- dat er een standaard rol :context_BinnenRol is
- dat er een standaard rol :context_BuitenRol is.
Het kan echter geen kwaad deze zaken te modelleren.
Wat we niet kunnen modelleren, is dat er ook arbitrair veel andere rollen zijn.

Maar hoe geef je nu aan dat een context bedoeld is als instantie van een ContextType? Zo:

Aangifte :aangifte1

wat gelijkwaardig is aan:

:aangifte1 psp:type :Aangifte
:aangifte1 rdf:type psp:Context

Het systeem kan deze semantische controle uitvoeren:
	Is het psp:type van :Aangifte psp:ContextType?


SYNTAX VOOR ROL: INSTANTIES EN MODELTYPEN
Overigens kan dit natuurlijk óók:

Aangever :jansen

en dan bedoelen we:

:jansen psp:Type :Aangever
:jansen rdf:type :psp:RolInContext

De regel is dus iets algemener. In 

<type> <qualifiedIdentifier>

moet <type> als psp:type een context hebben waarvan het psp:type psp:MetaType is. Dat psp:MetaType wordt gerealiseerd door een :Context of een :RolInContext. De afgeleide rdf is dan:

<qualifiedIdentifier> psp:type <type>
<qualifiedIdentifier> rdf:type ((<type> psp:type) :realizedBy)

(waar (<type> psp:type) staat voor het object van het geïmpliceerde triple, in dit voorbeeld dus psp:RolInContextType, die op zijn beurt weer wordt gerealiseerd door :RolInContext).


SYNTAX VOOR ROL BIJ CONTEXT
Een instantie:

	:Aangifte :aangifte1
		Aangever :jansen

Een type:

	ContextType :Aangifte
		RolInContext: :Aangever
		RolInContext: :Verbalisant

RDF representatie: 
	RolInContext: :Aangever

zou betekenen:

	:Aangever psp:Type :RolInContext
	:Aangever rdf:type :psp:Context

En:

	ContextType :Aangifte
		RolInContext: :Aangever

zou betekenen:

	:Aangifte :context_Rol :Aangever
	:Aangever psp:Type :RolInContext
	:Aangever rdf:type :psp:Context

d.w.z. de verbinding tussen contexttype en roltype is gelegd met :rol_Context.

SYNTAX VOOR PROPERTIES VAN EEN ROLINCONTEXT

Aangifte :aangifte1
	Aangever: :Jansen
		betrouwbaarheid = 10

Dit zou betekenen:

	:aangifte1 psp:type :Aangifte
	:aangifte1 rdf:type :Context
	:aangifte1 :aangever :Jansen
	:aangifte1 :context_Rol :Jansen

	:Jansen psp:type :Aangever
	:Jansen rdf:type :RolInContext
	:Jansen :betrouwbaarheid 10

Merk op dat de naam van de rolproperty van de contextinstantie is samengesteld uit de naam van de Context (Aangifte) en de naam van de Rol (Aangever). Dit is iets wat het systeem doet. De modelleur hoeft deze property naam niet te kennen en nooit te gebruiken. Het is een vorm van namespacing.
Precies hetzelfde geldt voor de property van de rolinstantie.

DE GOUDEN REGEL VOOR DE NAMEN VAN PROPERTIES VAN SPECIFIEKE ROLLEN:
een instantie van een instantie van :ContextType heeft voor een bijbehorende Rol een afgeleide property waarvan de naam is samengesteld uit de naam van het ContextType en het RolType. De waarde (het object) is hetzelfde als die van de algemene context_Rol property van de instantie van het ContextType.

NB: een instantie van :ContextType kunnen we een ModelType noemen (waarbij we in het midden laten dat het om Contexten gaat!). Bovenstaande zin begint dan met: een instantie van een ModelType heeft...
NB: een instantie van :ContextType kunnen we ook 'een ContextType' noemen. Bovenstaande zin begint dan met: een instantie van een ContextType heeft... Dan is wel bepaald dat het om een Context gaat.

DE GOUDEN REGEL, OPNIEUW GEFORMULEERD:
een instantie van een ContextType heeft voor een bijbehorende Rol een afgeleide property waarvan de naam is samengesteld uit de naam van het ContextType en het RolType. De waarde (het object) is hetzelfde als die van de algemene context_Rol property van de instantie van het ContextType.

EIGENLIJK HOEFT DIT NIET
Properties zijn niet langer globaal gedefinieerd. Of een property van toepassing is op een Rol, wordt bepaald door het betreffende RolInContextType.

SYNTAX VOOR DE DEFINITIE VAN EEN PROPERTY VAN EEN ROL IN CONTEXT
Merk op dat de range van properties alleen simpele typen kunnen zijn. Die kunnen niet als subject van een basisfeit voorkomen, dus hoeven we niet te bepalen of een property inverseFunctional is (dat is namelijk nooit zo).

	ContextType :Aangifte
		:RolInContextType :Aangever
			:PropertyType :betrouwbaarheid
				isFunctional = true
				isVerplicht = true
				range = "Int"

Dit zou betekenen:

	:Aangifte psp:type :ContextType
	:Aangifte rdf:type :Context
	:Aangifte :context_Rol :Aangever
	
	:Aangever psp:type :RolInContextType
	:Aangever rdf:type :Context
	:Aangever :context_Rol :betrouwbaarheid
	
	:Betrouwbaarheid psp:type :PropertyType
	:Betrouwbaarheid rdf:type :RolInContext
	
	:betrouwbaarheid :isFunctional = true
	:betrouwbaarheid :isVerplicht = true
	:betrouwbaarheid :range = "Int"


SYNTAX VOOR DEFINITIE VAN PROPERTIES VAN DE ZELFROLLEN

	ContextType :Aangifte
		private: status
			isFunctional = true
			isVerplicht = true
			range = "String"
		public: urgentie
			isFunctional = true
			isVerplicht = true
			range = "Int"

Dit is suikersyntax die herschreven kan worden:

	ContextType :Aangifte
		:BinnenRolType :AangifteBinnenRol
			:PropertyType :status
				isFunctional = true
				isVerplicht = true
				range = "String"
		:BuitenRolType :AangifteBuitenRol
			:PropertyType :urgentie
				isFunctional = true
				isVerplicht = true
				range = "Int"

Merk op:
	1. dat "AangifteBinnenRol" en "AangifeBuitenRol" vervangen kunnen worden door willekeurige identifiers. Het zijn anonieme ophangpunten van properties.
	2. Dat als er meerdere termen beginnend met 'private' (of 'public') voorkomen in de definitie, elk van hen verzameld wordt onder het corresponderende RolType.
	3. Dat de binnen- en buitenrol dezelfde namespace hebben. Dat zou, gezien de bovenstaande constructie, niet nodig zijn. Maar tot de basis van de representatie hoort dat de BinnenRol gebonden is aan de BuitenRol, zodat je van binnenuit óók de public properties kan zien (maar niet andersom)>

Hebben we syntax nodig voor het onderscheid private/public in queries? Ik denk het niet. Wel kan er semantische controle optreden: het is niet mogelijk een property van de BinnenRol op te vragen in een Context die een Rol heeft voor de BuitenRol.


SYNTAX VOOR PROPERTIES VAN ZELFROLLEN VAN EEN INSTANTIE VAN EEN CONTEXTTYPE

	:Aangifte :aangifte1
		status = "voltooid"
		urgentie = 5

	:aangifte1 psp:type :Aangifte
	:aangifte1 rdf:type :Context
	:aangifte1 :binnenRol :aangifte1BinnenRol
	:aangifte1BinnenRol :status "voltooid"
	:aangifte1 :buitenRol :aangifte1BuitenRol
	:aangifte1BuitenRol :urgentie 5

Merk opnieuw op dat :aangifte1BinnenRol en :aangifte1BuitenRol vervangen kunnen worden door willekeurige identifiers.

NB: omdat de BinnenRol geen andere rol kan vullen, hoeft hij niet apart van de context te worden opgeslagen. De BuitenRol wel.









