QUALIFIED EN DEFAULT NAMESPACED NAMES

Context namen:
model:<DomeinName>#ContextName
#ContextName

Rol namen:
model:<DomeinName>#ContextName#RoleName
#ContextName#RoleName
#RoleName

Property namen (of property perspectief namen):
model:<DomeinName>#ContextName#RoleName#PropertyName
#ContextName#RoleName#PropertyName
#RoleName#PropertyName
#PropertyName

default namespace:
:ContextName 
#RoleName

:ContextName aanvullen:
- bepaal het domein dat de default namespace levert
- vervang : door model:<DomeinName>#

#Name aanvullen
- vind de omhullende context
- plak de naam zoals die voorkomt in de tekst daarvan voor de naam in opbouw
- als de naam gekwalificeerd is, ben je klaar.

Wanneer is een naam gekwalificeerd? Als
- hij begint met :
- hij begint met prefix:
- hij begint met model:<DomeinNaam>#


Ik kom er in de prettyprinter roleBinding achter dat:
de rol "$AangeverBetrouwbaarheidPerspectief_$propertyReferentie_1", 
dus: 
de rol $propertyReferentie van $AangeverBetrouwbaarheidPerspectief:
heeft als binding
- $Betrouwbaarheid (de context)
in plaats van:
- $Betrouwbaarheid_buitenRol


Gebruik van roleBinding:
- in context
Hebben we hier structuur nodig? NEEN

Gebruik van context:
- in roleBindingWithInlineContext
Hebben we hier structuur nodig? NEEN
- in sourceText
Hebben we hier structuur nodig? NEEN
Kortom, voor geen van beiden hebben we structuur nodig.

Vragen:
1. Hoe gebruiken we de rolnaam model:Perspectives$Aangifte$Aangever?
	- de kleine beginletter
	- de namespacing door Aangifte.
2. Is het niet toch handig om :namespace te kunnen gebruiken voor de default domein namespace?
Dan kun je door elkaar heen $context en :domein gebruiken.



================================================================================================
Een tekst die Perspectives contexten en rollen beschrijft, is opgebouwd uit een aantal eenvoudige soorten expressies:
	- context declaratie
	- rolbinding, onderscheiden in rolbinding met referentie en rolbinding met inline context declaratie
	- drie soorten property assignment
	- query

In al deze expressies komen identifiers voor. Elk van hen kan zowel volledig gekwalificeerd zijn (met domeinnaam of met een prefix), of met een impliciete namespace zijn opgeschreven (in de vorm: $localName).
Er zijn twee manieren om de namespace bij een lokale naam te vinden. Welke manier we gebruiken, hangt af van de lexicale positie van de identifier.
We onderscheiden twee soorten lexicale positie:
	- de *gedeclareerde contextnaam* in een context-declaratie;
	- alle andere posities, die we *referentie positie* noemen. Daarbinnen onderscheiden we de *type-posities*:
		- de typenaam in een context-declaratie;
		- de rolnaam in een rolbinding
	  Dat laat drie 'zuivere' referentieposities over:
		- de binding in een rolbinding
		- de propertynaam in de property assignment expressies
		- alle posities in een query.

De *declaratie-namespace* van een tekst is de naam van de context die bovenin de tekst wordt gedeclareerd met:

	Context <naam>

Onder *context-definitie* verstaan we een context-declaratie en het blok van inspringende regels eronder. De localname van een gedeclareerde contextnaam voegen we toe aan de declaratie-namespace. De combinatie is de declaratie-namespace die geldt voor het inspringende blok eronder. Elke gedeclareerde contextnaam die als localname is geschreven, heeft als namespace de declaratie-namespace van het omhullende blok.

Op vergelijkbare wijze spreken we van de type-namespace. Een lokale naam in een type-positie, zoals de typenaam in een context-declaratie, voegen we toe aan de type-namespace. Deze namespace geldt voor het inspringende blok expressies onder een context-declaratie en onder een rolbinding (de enige twee expressies die gevolgd worden door een inspringend blok).

We gebruiken de type-namespace om een lokale naam in referentiepositie aan te vullen.

Zodra in een type-positie een gekwalificeerde naam wordt gebruikt, geldt die naam als type-namespace voor het blok eronder.

================================================================================================
De relatie tussen een context en het domein waar die context in gedefinieerd is, kunnen we ons lexicaal voorstellen.
Met andere woorden: de definitie van de context is dan lexicaal genest in de definitie van het domein.

Hoe is de relatie tussen domeinen? Als in het ene domein een type van het andere domein gebruikt wordt, wat is dan de relatie tussen beide?
1. Het gebruikende domein is *niet* lexicaal genest. Want dan zou de naam van het gebruikende domein gekwalificeerd zijn met de naam van het gebruikte domein. Dat is niet de bedoeling.
2. De gebruikte naam moet ofwel gekwalificeerd zijn, ofwel het moet zo zijn dat in de tekst het gebruikte domein het default domein is.
3. Ik noem een gebruikt domein een *import*, oftewel een *geimporteerd domein*. Dit doet lexicaal niets. De editor zal aan de hand van de tegelijkertijd geintroduceerde prefix aanvullingen suggereren aan de hand van de ingetikte prefix.

================================================================================================
DOEN:
1. Context declaratie toevoegen aan parser/prettyprinter. Vervang Text daarmee. KLAAR
2. Sectie toevoegen. KLAAR
3. type-namespace toevoegen.
4. Prefix declaratie toevoegen (import). KLAAR
(5. :localName toevoegen als default Context namespace?)
6. Een kleine beginletter toestaan als contextnaam.
