CONTEXTEN EN ROLLEN PRESENTEREN
Een diagram en een ARC tekst zijn presentatiemiddelen. We visualiseren er typen contexten en rollen mee. Bij deze visualisatie selecteren we onderdelen van een onderliggende representatie. Met andere woorden, de onderliggende representatie wordt, naar keuze van de modelleur, slechts gedeeltelijk gepresenteerd in een bepaalde ARC tekst of in een bepaald diagram. Bovendien voegen we in een presentatie informatie toe aan de onderliggende representatie, zoals:
	- (in tekst) welke volgorde hebben de rollen in een context en de properties in een rol?
	- (in tekst) laten we een in ingebedde definitie (inline, lexicaal genest) in zijn geheel zien, of slechts een verwijzing ernaar?
	- (in tekst) laten we een context of rol of sectie zoals rollen, views, properties en acties ingeklapt zien, of uitgeklapt?
	- (in diagram) waar staan de onderdelen in het vlak?
Verder brengen de drie verschillende diagram-typen een eigen, constant filter met zich mee: in een rol-diagram zien we b.v. alleen properties en views.

Dat leidt tot de volgende vragen:
1. Waar selecteren we uit? Oftewel, wat is de onderliggende representatie van contexten en rollen?
2. Hoe selecteren we, d.w.z. hoe leggen we een selectie vast?
3. Hoe leggen we de extra presentatie-informatie vast?

DE ONDERLIGGENDE REPRESENTATIE
Ik ga ervan uit dat de onderliggende representatie van een model - types, dus - de modellering in CRL is die ik heb geconstrueerd. We willen immers opslaan in contexten en rollen - instanties, dus. Die gedachtenoefening heb ik gedaan en daar is de CRL modellering van types uit voortgekomen.

REPRESENTATIE VAN DE PRESENTATIE
De consequentie is, dat we dus selecties maken van een CRL representatie van een ARC model. Dat slaan we op, opnieuw in termen van contexten en rollen en dáár construeren we teksten en diagrammen uit.
De extra presentatie-informatie leggen we vast als properties van de daarbij gebruikte contexten en rollen.

CRL VERSUS ARC
In CRL beschrijven we elk type als een context met rollen. 

In ARC is elke Zaak, Domein, Partij, Toestand, Activiteit, UserRol, Rol, Bot, property, Actie en view een type. Alles wat we een naam kunnen geven, beschrijft een type. Een type context of rol, alsmede properties, acties en views zijn allemaal types.

Vertalen we dat naar CRL, dan worden het dus allemaal contexten.

Een presentatie van een type is dus een selectie uit de rollen van een context in CRL.

Daarbij is het belangrijk om erbij stil te staan dat we in CRL andere context-typen hebben dan in ARC. Domein, Partij, Zaak, Activiteit en Toestand komen in CRL niet voor. In plaats daarvan hebben we ContextType. Bovendien hebben we twee andere typen contexten, namelijk RolInContext en Singleton.

ZIE DE TEKST ARCPRESENTATIE.TXT.

--------------------------------------------------------------------------------
-- MODELLERING VAN CRL IN ARC
--------------------------------------------------------------------------------
-- Om CRL te kunnen modelleren in ARC, hebben we naast Domein, Zaak, enz. nog
-- drie soorten contexten nodig:
--	ContextType
--	RolInContext
--	Singleton
--------------------------------------------------------------------------------

-- Lees dit als volgt: Instanties van ContextType hebben drie soorten onderdelen: 
-- externe properties, interne properties en rollen. Het gaat hier dus om de ARC
-- concepten Domein, Partij, Zaak, Activiteit en Toestand.
-- CRL heeft echter meer instanties van ContextType.
ContextType ContextType heeft
	rollen
		RolInContext gevuld door PublicProperty, PrivateProperty, RolInContext

-- Lees dit als volgt: Instanties van RolInContext hebben drie soorten onderdelen:
-- properties, views en types die beperken waar de rol mee gevuld kan worden.
-- In ARC gaat het dus om rollen.
ContextType RolInContext heeft
	rollen
		RolInContext gevuld door RolProperty, View, MogelijkeBinding

-- Lees dit als volgt: instanties van Property krijgen een waarde op drie properties,
-- namelijk: isFunctioneel, isVerplicht en range.
-- In ARC gaat het dus om interne-, externe- en rolproperties.
ContextType Property heeft
	rollen
		PublicProperty gevuld door IsFunctioneel, IsVerplicht, Range

-- Lees dit als volgt: instanties van View hebben één rol, ReferentieNaarProperty
-- (maar onbeperkt veel daarvan, hoewel we dit nog niet in ARC kunnen vastleggen). 
-- Die rol krijgt verplicht één numerieke waarde voor de property VolgNummer
-- en kan worden gevuld met een instantie van Property.
ContextType View heeft
	rollen
		RolInContext gevuld door 
			RolInContext ReferentieNaarProperty heeft
				rollen
					RolProperty gevuld door 
						Singleton Property(VolgNummer)
							extern isFunctioneel = true
							extern isVerplicht = true
							extern range = Number
					MogelijkeBinding gevuld door Property

-- Een Singleton is een type met één instantie, namelijk zichzelf.
Singleton IsFunctioneel(Property)
	extern isFunctioneel = true
	extern isVerplicht = true
	-- een propertywaarde is ofwel een constante, ofwel een enumeratie
	extern range = Boolean

Singleton IsVerplicht(Property)
	extern isFunctioneel = true
	extern isVerplicht = true
	extern range = Boolean

Singleton Range(Property)
	extern isFunctioneel = true
	extern isVerplicht = true
	-- met het 'matches' facet beperken we de mogelijke waarden van een string
	-- tot degenen die voldoen aan de gegeven reguliere expressie.
	extern range = String matches /String|Number|Boolean|Date|Memo/

ContextType PrivateProperty
ContextType PublicProperty
ContextType RolProperty
ContextType Query
ContextType MogelijkeBinding





















