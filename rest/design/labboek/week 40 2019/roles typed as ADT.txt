ROLES TYPED AS AN ADT


-- | The range of the computation of the RoleType.
-- | Does not include the binding, for (ENR (EnumeratedRoleType e)).
rangeOfRoleCalculation :: RoleType -> MonadPerspectives (ADT EnumeratedRoleType)

-- | An ADT is fully expanded iff expanding any of the simple types (ST) results
-- | in the same type (the expansion is the fixpoint).
expansionOfADT :: ADT EnumeratedRoleType -> MP (ADT EnumeratedRoleType)

-- | The type of the Role, including its binding. Always a product for an EnumeratedType.
typeIncludingBinding :: r -> MonadPerspectives (ADT EnumeratedRoleType)

ONTWERP
1. Een nieuwe member voor RoleClass:
expandedADT :: r -> MP (ADT EnumeratedRoleType)

Het resultaat is een ge-expandeerd ADT.

Voor CalculatedRoles is dat de range van zijn berekening.
Voor EnumeratedRoles is het een berekening van het PROD van zichzelf en de expandedADT van zijn binding.

Dit is niet hetzelfde als de huidige typeIncludingBinding, omdat die niet recurseert op de binding.

2. Ik moet deze nieuwe functie `expandedADT` toepassen in compileElementaryStep, zodat het resultaat van die functie altijd een geÃ«xpandeerd ADT is.

3. Kan ik expandedADT voor EnumeratedRoles opschrijven in termen van reduce? Jazeker, dat is expansionOfADT.