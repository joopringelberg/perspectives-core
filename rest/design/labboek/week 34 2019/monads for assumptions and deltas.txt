MONADS VOOR ASSUMPTIES EN DELTAS


MONADDELTA
* Een Transactie wordt opgebouwd in twee gevallen:
	- als de API een mutatieverzoek ontvangt. De mutatie wordt uitgevoerd en daarna volgt ActionForwardPropagation. Beide dragen Delta's bij aan de Transactie en Assumptions aan ChangedAssumptions
	- als de core Delta's ontvangt van andere gebruikers. De betreffende mutaties worden uitgevoerd en leiden direct tot ChangedAssumptions (maar uiteraard niet tot Deltas!). Tijdens de ActionForwardPropagation die volgt, kunnen wel nieuwe Delta's ontstaan (door Acties die niet door andere betrokkenen worden uitgevoerd).

* Dit betekent dat we beide gevallen kunnen uitvoeren in een specifieke monad met cumulatieve state (MonadDelta), waarin zich bevinden:
	- de Transactie;
	- ChangedAssumptions in een catenable list (een fifo queue)
	- Ingekomen Delta's (nul in het geval van een update request via de API; nodig om nieuwe Delta's te detecteren)
Deze state hoeft dus **niet** in MonadPerspectives te worden bijgehouden!
MonadDelta stapelen we op MonadPerspectivesQuery, die bijhoudt:
	-- AllChangedAssumptions ten bate van QueryHerberekening

* we runnen beide gevallen in die monad en gebruiken 
	- de resulterende Transactie om andere gebruikers Delta's te sturen
	- de resulterende AllChangedAssumptions om QueryHerberekening uit te voeren (dit is herberekening van GET requests via de API; niet van Acties).

* de dependency tracking (voor get-s via de API en de lhs van acties) vindt in veel meer gevallen plaats:
	- bij ontvangst van een GET via de API;
	- bij het opzetten van een (context-gebonden) Actie;
	- tijdens QueryHerberekening;
	- tijdens ActionForwardPropagation.
Daarom lijkt het me zinnig om dit in MonadPerspectives zelf bij te houden - of om het buiten het gezicht van Purescript te houden.
Voor het laatste geval moeten we ons afvragen of de asynchroniciteit roet in het eten kan gooien.

* Elk van de volgende basisoperaties werkt in MonadPerspectivesQuery:
	- getRoleInstances
	- getPropertyValue
	- getRoleContext
	- getRoleBinding
	- getRoleBinders
	Elk van hen pusht een assumptie in de monad.

* Mutatie functies werken in MonadDelta:
	- setRole (add, delete)
	- setPropertyValue (add, delete)
	- bindRole (add, delete)

* in de API run je een aangevraagde query in de MonadPerspectivesQuery (runMonadPerspectivesQuery). De resulterende assumpties gebruik je om de query voor Herberekening te registreren. Het resultaat stuur je terug door de API.
* bij herberekening van een aangevraagde query executeer je weer in de MonadPerspectivesQuery. De verzameling assumpties onder het resultaat kan anders zijn dan de vorige keer. Derhalve werk je de dependency tracking bij. Het resultaat gaat terug de API in.

* Een Actie bestaat uit een query- en een mutatiedeel.
	- het query-deel wordt uitgevoerd in MonadPerspectivesQuery
	- het mutatiedeel wordt uitgevoerd in MonadDelta
* Bij opzetten van een Actie executeer je het querydeel en gebruik je de assumpties om de Actie te registreren voor AssumptionPropagation (dit is een andere registratie dan die van Herberekening van queries!). Vervolgens executeer je de updates met behulp van het queryresultaat, in de DeltaMonad. Levert dat Delta's op, dan begint AssumptionPropagation.
