Wat voor calculated getters hebben we?
	* calculated Role
	* calculated Property

CALCULATED ROLE
Wat voor functies hebben we?
	* Context -> Role
	* Role -> Role
Maar het kan ook zo:
	* Role - Context - Role

De functies:
	* returnsContext
	* returnsRole
	* returnsPropertyValue
hebben de signatuur: QueryFunctionDescription -> Boolean.

CalculatedRole :: Context -> Role
Een CalculatedRole kan een RoleGetter zijn.
Een CalculatedRole kan bestaan uit een compositie van
	* een RoleGetter en een functie die van een Rol een Rol oplevert (Binding, InverseBinding)
		(Context -> Role) (Role -> Role)
	* een RoleGetter en een functie die een context oplevert en een CalculatedRole
		(Context -> Role) 

Ik heb de QueryFunctionDescriptionCompiler zo opgezet, dat hij een QueryFunctionDescription oplevert:
	data QueryFunctionDescription = QD Domain QueryFunction Range
Dat doet hij niet alleen voor elementaire querystappen, maar juist ook voor samengestelde.

Dus als je de compiler start, heb je een QueryFunctionDescription die semantisch klopt (alles sluit op elkaar aan) en bovendien weet je het domein en de range.

Er zijn drie typen domein/range en dus 9 combinaties, waarvan een aantal uitvalt:
				Context	Role	PropertyValue
Context			?		+		+
Role			+		+		+
PropertyValue	_		_

Deze vijf (of zes) gevallen kunnen we in de querycompiler allemaal van elkaar onderscheiden.
Anders gezegd: er zijn vijf of zes verschillende compilerfuncties.

Maar één compilerfunctie, bijvoorbeeld van Context naar Role, kan op veel verschillende manier berekend worden.
Oftewel, QueryFunction kan nogal verschillende waarden aannemen.
De simpelste is RolGetter.
Maar het zou ook NaryCombinator "compose" [RolGetter (ENR "myrole"), DataTypeGetter "binding"] kunnen zijn.

Dus: we moeten een gevalsonderscheiding maken op alle vormen die QueryFunction kan aannemen.

================================================================================
ACTIONS

Een Actie wordt uitgevoerd door de bot (de bot is het subject). De Actie heeft ook een Object en dat is een Role van de Context. 
De Actie heeft een zij-effect (update). Is het altijd zo dat dat de update het Object van de Actie verandert? Of kan ook een verandering aangebracht worden op een andere Role van de Context?


Wat zijn de assumpties voor een Actie? 
1. De berekening van de conditie is gebaseerd op assumpties.
2. De berekening van de waarde die gegeven wordt aan een Rol of Property, is gebaseerd op assumpties (mogelijk nul, als de waarde een constante is overigens)
3. De berekening van het uiteindelijke object dat wordt aangepast, is gebaseerd op assumpties.

Moeten we de Actie opnieuw uitvoeren als willekeurig welke van die assumpties verandert?
Of moeten we de Actie opnieuw uitvoeren als de conditie verandert?
Of moeten we de Actie opnieuw uitvoeren als de assumpties onder de conditie veranderen?
Of moeten we de Actie opnieuw uitvoeren als de assumpties onder de waarde veranderen?

Garanderen we een declaratieve relatie met een Actie?

Ik denk:
0. Dat we géén declaratieve relatie met een Actie afdwingen;
1. dat de Actie alleen uitgevoerd moet worden als de condition true is;
2. Dat de Actie alleen een zij-effect heeft op zijn Object;
3. dat de Actie opnieuw uitgevoerd moet worden als er een nieuw Object verschijnt (d.w.z. dat de Rol die het Object van de Actie is, een nieuwe instantie krijgt).

