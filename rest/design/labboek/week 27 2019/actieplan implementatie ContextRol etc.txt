CONTEXTROL EN ROLINCONTEXT IN DE MODELLERING OPNEMEN

DONE
1. Defineer de vier roltypes in perspectives.crl.
2. Definieer $contextRol.
3. Gebruik de nieuwe rol en de vier types in 
	- perspectives.crl			KLAAR
	- query.crl					KLAAR
	- testBotActie.crl			KLAAR
	- testOGC.crl				KLAAR
	- testTypeDefChecker.crl	KLAAR

Handelingen:
	* vervang $buitenRolBeschrijving => psp:Rol door $buitenRolBeschrijving => psp:BuitenRol
	* net zo voor binnenRol
	* vervang  $rolInContext => psp:Rol door $contextRol => psp:ContextRol
	* ga psp:Rol na en vervang zo nodig.

Nabewerking: een ContextRol kan gebonden worden aan een ContextRol of een BuitenRol. Ga na waar ik te enthousiast alleen ContextRol heb gebruikt. Maak eventueel een type voor de Sum.
DAT IS TE MOEILIJK zonder concrete gevallen. Verschuift naar het testen van de modellen.

4. Implementeer de nabewerking in de parser voor de ContextRol types.

5. Controleer het voorkomen van de string "rolInContext" en vervang zo nodig door "contextRol".

IN UITVOERING

TODO
6. Maak in TypeChecker.checkBinding onderscheid tussen ContextRol, RolInContext en BuitenRol.
7. Vervang (het binding-toets gedeelte van) TypeDefChecker.compareRolInstanceToDefinition door TypeChecker.checkBinding.
8. Ga in de tests na welke testcontexten aangepast moeten worden zodat $contextRol en $rolInContext goed gebruikt worden.
9. Er zijn functies die een ContextRol opleveren, met een variant die een RolInContext opleveren. Controleer die.


HET GEVAL ACTIE$SUBJECT
1. Voor een bepaalde Actie (dus met type psp:Actie) wil ik kunnen vastleggen wat de subjecten van zijn instanties kunnen zijn.

2. Normaliter doe je dat door in dat type actie een rol $subject te definieren en die een mogelijke binding mee te geven.

3. Maar nu is de vraag of Acties wel een instantie hebben.

4. Het subject van een instantie van een Actie is altijd een rol uit de context. Een RolInContext; het moet een agent rol zijn en dat is nooit een Context.

5. Er is een default prototype van Actie. Dat garandeert dat elke instantie van Actie het aspect ActieAspect heeft.

6. Als je dan in een Actie X de rol $subject de $aspectRol $subject geeft, beperk je de mogelijke binding van X$subject tot psp:PerspectivesSysteem$gebruiker of psp:Context$contextBot.

7. De definitie van de Zaak waarbinnen een Actie is gedefinieerd, kan je een (lege) rol ?contextBot geven. Het lijkt om het even of dat dan een ContextRol of een RolInContext is.

8. Deze rol kan gebonden worden aan de rol $subject van de Actie (met behulp van de -> rolbinding syntax). Zo functioneert het in TestBotActie.

9. Resteert de vraag: hoe beperk je een Actie tot een bepaalde gebruikerrol?
Wellicht door $subject aan een RolInContext te binden, waarvan de mogelijkeBinding de beperking opgeeft. Als je de aspectRol $subject toevoegt aan X$subject, beperk je de mogelijke bindingen.

Maar nu hebben we dus in $subject een rol die we kunnen binden aan een instantie van RolInContext of ContextRol van de Zaak, Ã¨n aan een definitie van RolInContext!?