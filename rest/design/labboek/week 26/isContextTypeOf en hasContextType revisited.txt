HASROLTYPE, HASCONTEXTTYPE, ISCONTEXTTYPEOF - REVISITED

hasContextType
	* modelBasedObjectGetters
	* modelBasedTripleGetters

hasRolType
	* modelBasedTripleGetters

isContextTypeOf
	* modelBasedObjectGetters
	* modelBasedTripleGetters


DE BEDOELING
van hasContextType en isContextTypeOf is dat ze dezelfde betekenis hebben, maar met omgedraaide argumenten. Dat is niet simpelweg een kwestie van een flip, omdat het over TypeTripleGetters gaat.

	instance `hasContextType` type

is de omgekeerde van

	type isContextTypeOf instance

OBSERVATIES
1. De definities van hasContextType en isContextTypeOf in de Object- en TripleGetters zijn omgekeerd. D.w.z.
	* de objectGetter definitie van isContextTypeOf volgt de definitie van de TripleGetter van hasContextType.
	* en vice versa.


ISORHASASPECT

KLAAR

ModelBasedObjectGetters is now complete and semantically valid.

Now the tests.

* isAspectOf - komt niet voor
* hasAspect - komt niet voor
* equalsOrIsAspectOf - komt niet voor
* isOrHasAspect - komt niet voor
* isContextTypeOf - komt niet voor
* hasContextType - komt niet voor

Kortom, geen van deze functies wordt getest!

Nu wel. Alles slaagt.

TRIPLEGETTERS
isAspectOf 			KLAAR!
(de inverse hasAspect ontbreekt)

equalsOrIsAspectOf KLAAR

Tests:
	* isAspectOf

COMPLETE REGRESSIETEST
* DataTypeObjectGetters
* DataTypeTripleGetters
* ObjectGetterConstructors
* TripleGetterConstructors
* StringTripleGetterConstructors
* ResourceRetrieval
* ModelBasedObjectGetters
* ModelBasedTripleGetters
* ModelBasedStringTripleGetters
* QueryCombinators
* QueryCompiler (werkt niet, is niet goed gemaakt).
* ResourceRetrieval
* TestBotActie De test compileBotAction faalt op de derde deeltest.
* Dependencies
* TheoryChange
* TripleGetterComposition
* TypeChecker

TE DOEN
* TypeDefChecker

===============
Voor "model:Perspectives$PerspectivesSysteem$modellen" haalt ie niet 'contextLabel' op.
Het gaat om de berekening (effectiveRolType >-> propertiesDef)

effectiveRolType faalt de test. 

psp:PerspectivesSysteem$modellen moet als effectiveRolType psp:Model hebben, maar levert psp:PerspectivesSysteem$modellen op.

Hij wordt dus niet herkend als een functie. 

OPGELOST

===============
De rolBindingCheck probeert model:Perspectives$_buitenRol op te halen als een context. De rol is de rol die als object wordt meegegeven. 
subject: psp:PerspectivesSysteem
predicate: modelsInUse
object: model:Perspectives$_buitenRol

Dan volgt: checkBinding typeOfRolToBindTo valueToBind 
waar:
typeOfRolToBindTo: $modelsInUse
valueToBind: model:Perspectives$_buitenRol

In de expressie 
(isRolInContext :: Maybe PBool) <- typeOfRolToBindTo ##> MBTG.mogelijkeBinding >-> (MBTG.equalsOrIsAspectOf "model:Perspectives$Rol")
krijgt isRolinContext de waarde PBool "false".

En dat klopt, want:
	$mogelijkeBinding => psp:Model

Dan wordt uitgevoerd: checkBindingOfContextRol (ContextRol valueToBind)

De typering van model:Perspectives$_buitenRol klopt niet, want het is natuurlijk een buitenrol. Maar is dat erg? Ik denk van niet.

Maar dan wordt 
	(hasContextTypeOnEachRolTelescopeOf (unwrap valueToBind'))
geevalueerd. En in de implementatie daarvan wordt valueToBind' = model:Perspectives$_buitenRol verondersteld een context(instantie) te zijn. En dat klopt niet.


