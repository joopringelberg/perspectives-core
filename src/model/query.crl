Context model:QueryAst als q:

import model:Perspectives als psp:

Section psp:rolInContext

psp:Context q:Query

q:Query q:RolQuery

q:Query q:PropertyQuery

--------------------------------------------------------------------------------
-- ASPECTEN
--------------------------------------------------------------------------------
psp:Context q:PropertyFunction
	psp:aspect => psp:Function
	psp:rolInContext =>
		psp:Rol $domain
			psp:aspectRol => psp:Function$domain
			psp:mogelijkeBinding => psp:Rol
	psp:rolInContext =>
		psp:Rol $range
			psp:aspectRol => psp:Function$range
			psp:mogelijkeBinding => psp:SimpleValue

psp:Context q:RolFunction
	psp:aspect => psp:Function
	psp:rolInContext =>
		psp:Rol $domain
			psp:aspectRol => psp:Function$domain
			psp:mogelijkeBinding => psp:Context
	psp:rolInContext =>
		psp:Rol $range
			psp:aspectRol => psp:Function$range
			psp:mogelijkeBinding => psp:Rol

--------------------------------------------------------------------------------
-- SYSTEM GETTERS
--------------------------------------------------------------------------------
q:query q:identity
	psp:aspect => psp:Function
	psp:rolInContext =>
		psp:Rol $range
			extern psp:isFunctioneel = true
			psp:aspectRol => psp:Function$range

q:RolQuery q:contextType
q:RolQuery q:buitenRol
	psp:aspect => q:RolFunction

q:RolQuery q:iedereRolInContext
q:RolQuery q:rolTypen
q:RolQuery q:rolType
q:RolQuery q:binding
	psp:aspect => q:RolFunction

q:Query q:context -- Should be a ContextQuery but we do not have that.
q:Query q:useCache
q:Query q:ignoreCache
q:PropertyQuery q:label

--------------------------------------------------------------------------------
-- QUERY CONSTRUCTORS
--------------------------------------------------------------------------------
q:PropertyQuery q:constructExternalPropertyGetter
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

-- Apply like this: q:constructExternalPropertyLookup $<propname>
q:PropertyQuery q:constructExternalPropertyLookup
	psp:aspect => q:PropertyFunction

q:PropertyQuery q:constructInternalPropertyGetter
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

-- Apply like this: q:constructInternalPropertyLookup $<propname>
q:PropertyQuery q:constructInternalPropertyLookup
	psp:aspect => q:PropertyFunction

-- Works for declared and calculated properties. Note case difference!
q:PropertyQuery q:propertyQuery
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

q:PropertyQuery q:constructRolPropertyGetter
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

-- Apply like this: q:constructRolPropertyLookup $<propname>
q:PropertyQuery q:constructRolPropertyLookup
	psp:aspect => q:PropertyFunction

-- Works for declared and calculated roles.
q:RolQuery q:rolQuery
	psp:aspect => q:RolFunction
	psp:rolInContext =>
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol

-- Works only for declared roles. Can be replaced by q:rolQuery.
q:RolQuery q:constructRolGetter
	psp:aspect => q:RolFunction
	psp:rolInContext =>
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol

-- Apply like this: q:constructRolLookup $<rolname>
-- Works only for declared roles. Can be replaced by q:constructRolGetter.
q:RolQuery q:constructRolLookup

q:RolQuery q:constructInverseRolGetter
	psp:aspect => q:RolFunction
	psp:rolInContext =>
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol

-- It is unlikely we will use this constructor in a model.
q:RolQuery q:rolesOf
	psp:aspect => q:RolFunction
	psp:rolInContext =>
		psp:Rol $context
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Context

--------------------------------------------------------------------------------
-- COMBINATORS
--------------------------------------------------------------------------------
q:Query q:laatste
	psp:rolInContext =>
		psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:Query

q:Query q:compose
	psp:rolInContext =>
		psp:Rol $operand
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:Query

q:PropertyQuery q:Criterium

-- notEmpty is itself not a Criterium, but the application of notEmpty to a Query is.
q:Criterium q:notEmpty
	psp:rolInContext =>
		psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:Query

q:RolQuery q:closure
	psp:rolInContext =>
		psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:RolQuery

q:RolQuery q:closure'
	psp:rolInContext =>
	 	psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:RolQuery

q:RolQuery q:lastElement
	psp:rolInContext =>
	 	psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:RolQuery

q:Query q:filter
	psp:rolInContext =>
	 	psp:Rol $criterium
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:Criterium
	psp:rolInContext =>
		psp:Rol $candidates
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding q:Query

q:Query q:concat
	psp:rolInContext =>
		psp:Rol $operand
			extern psp:isFunctioneel = false
			psp:mogelijkeBinding q:Query

--------------------------------------------------------------------------------
-- COMBINATOR CONSTRUCTORS
--------------------------------------------------------------------------------
-- It is unlikely we will use this constructor in a model.
q:Context q:contains
	psp:rolInContext =>
		psp:Rol $valueOrId
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Context
	psp:rolInContext =>
		psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:Query

--------------------------------------------------------------------------------
-- CONSTANT
--------------------------------------------------------------------------------
psp:Rol q:Constant
	psp:internalProperty =>
		psp:Property $value
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			psp:range => psp:String

--------------------------------------------------------------------------------
-- VARIABLE
--------------------------------------------------------------------------------
psp:Context q:Variable
	psp:internalProperty =>
		psp:Property $name
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			psp:range => psp:String

psp:Context q:setVariable
	psp:internalProperty =>
		psp:Property $name
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			psp:range => psp:String
	psp:rolInContext =>
		psp:Rol $value
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:RolQuery
			psp:mogelijkeBinding => q:PropertyQuery
			psp:mogelijkeBinding => q:Variable
			psp:mogelijkeBinding => psp:Context

--------------------------------------------------------------------------------
-- ASSIGNMENT
--------------------------------------------------------------------------------
-- We add to the context of the actie that this statement occurs in.
-- addRol :: forall e. ContextID -> RolName -> RolID -> MonadTransactie e Unit
-- Apply like this for the statement: "getuige += verdachte":
--	assignToRol <gen>
--		intern $operation = "add"
--		$rol => pol:Aangifte$getuige
--		$value =>
--			q:constructRolLookup <gen>
--				$rol => pol:Aangifte$verdachte
psp:Context q:assignToRol
	psp:internalProperty =>
		psp:Property $operation
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			-- possible values are: "add", "remove", "set"
			psp:range => psp:String
	psp:rolInContext =>
		-- The rol we will assign to. The qualified name is used!
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol
	psp:rolInContext =>
		-- The rol instance we will add, delete or set:
		psp:Rol $value
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:RolQuery
			psp:mogelijkeBinding => q:Variable
			psp:mogelijkeBinding => psp:Context

-- We add to the context of the actie that this statement occurs in.
-- assignToProperty :: forall e. RolID -> PropertyName -> Value -> MonadTransactie e Unit
-- Apply like this for the statement: 'voornaam van getuige += "Jan"':
--	assignToProperty <gen>
--		intern $operation = "add"
--		$rol => pol:Aangifte$getuige
--		$property => psp:Persoon$voornaam
--		$value =>
--			q:Constant "Jan"
-- Apply like this for the statement: 'voornaam van getuige += verdachte voornaam':
--	assignToProperty <gen>
--		intern $operation = "add"
--		$rol => pol:Aangifte$getuige
--		$property => psp:Persoon$voornaam
--		$value =>
--			q:compose $xxx
--				$operand (1) =>
--					q:constructRolLookup $verdachte
--				$operand (2) =>
--					q:constructExternalPropertyLookup $voornaam
psp:Context q:assignToProperty
	psp:internalProperty =>
		psp:Property $operation
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			-- possible values are: "add", "remove", "set"
			psp:range => psp:String
	psp:internalProperty =>
		psp:Property $constantValue
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = false
			psp:range => psp:String
	psp:rolInContext =>
		-- The rol we will change a property of. The qualified name is used!
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol
	psp:rolInContext =>
		-- The property we will change. The qualified name is used!
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property
	psp:rolInContext =>
		-- The property query that gives the value:
		psp:Rol $value
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:PropertyQuery
			psp:mogelijkeBinding => q:Variable
