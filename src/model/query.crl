Context model:QueryAst als q:

import model:Perspectives als psp:

Section psp:rolInContext

psp:Context q:Query

q:Query q:RolQuery

q:Query q:PropertyQuery

--------------------------------------------------------------------------------
-- ASPECTEN
--------------------------------------------------------------------------------
psp:Context q:PropertyFunction
	psp:aspect => psp:Function
	psp:rolInContext =>
		psp:Rol $domain
			psp:aspectRol => psp:Function$domain
			psp:mogelijkeBinding => psp:Rol
	psp:rolInContext =>
		psp:Rol $range
			psp:aspectRol => psp:Function$range
			psp:mogelijkeBinding => psp:SimpleValue

psp:Context q:SingularPropertyFunction
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $range
			extern psp:isFunctioneel = true
			psp:aspectRol => q:PropertyFunction$range

psp:Context q:RolFunction
	psp:aspect => psp:Function
	psp:rolInContext =>
		psp:Rol $domain
			psp:aspectRol => psp:Function$domain
			psp:mogelijkeBinding => psp:Context
	psp:rolInContext =>
		psp:Rol $range
			psp:aspectRol => psp:Function$range
			psp:mogelijkeBinding =>
				psp:Sum
					psp:alternative => psp:Context
					psp:alternative => psp:Rol

--------------------------------------------------------------------------------
-- SYSTEM GETTERS
--------------------------------------------------------------------------------
-- Identity is like Function (takes and returns any type) but yields a single result.
psp:Context q:identity
	psp:aspect => psp:Function
	psp:rolInContext =>
		psp:Rol $range
			extern psp:isFunctioneel = true
			psp:aspectRol => psp:Function$range

psp:SingularFunction q:contextType
	$domain => psp:Context
	$range => psp:Context

psp:SingularFunction q:buitenRol
	$domain => psp:Context
	$range => psp:Rol

psp:SingularFunction q:binnenRol
	$domain => psp:Context
	$range => psp:Rol

-- Returns the values of the rolInContext field of a PerspectContext. These are ids of
-- role instances.
psp:Function q:iedereRolInContext
	$domain => psp:Context
	$range => psp:Rol

-- Returns the keys of the rolInContext field of a PerspectContext. These are ids of Contexts
-- that describe RolTypes.
psp:Function q:rolTypen
	$domain => psp:Context
	$range => psp:Context

psp:SingularFunction q:rolType
	$domain => psp:Context
	$range => psp:Context

psp:SingularFunction q:binding
	$domain => psp:Rol
	$range => psp:Rol

psp:SingularFunction q:context
	$domain => psp:Rol
	$range => psp:Context

psp:SingularPropertyFunction q:label
	psp:rolInContext =>
		psp:Rol $range
			psp:aspectRol => psp:SingularPropertyFunction$range
			psp:mogelijkeBinding => psp:String

--------------------------------------------------------------------------------
-- QUERY CONSTRUCTORS
--------------------------------------------------------------------------------
--q:Query q:useCache
--q:Query q:ignoreCache

psp:Context q:constructExternalPropertyGetter
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

-- Apply like this: q:constructExternalPropertyLookup $<propname>
psp:Context q:constructExternalPropertyLookup
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

psp:Context q:constructInternalPropertyGetter
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

-- Apply like this: q:constructInternalPropertyLookup $<propname>
psp:Context q:constructInternalPropertyLookup
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

-- Works for declared and calculated properties. Note case difference!
-- TODO. Dit is misschien overbodig.
psp:Context q:propertyQuery
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

psp:Context q:constructRolPropertyGetter
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

-- Apply like this: q:constructRolPropertyLookup $<propname>
psp:Context q:constructRolPropertyLookup
	psp:aspect => q:PropertyFunction
	psp:rolInContext =>
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property

-- Works for declared and calculated roles.
-- TODO. Dit is misschien overbodig.
psp:Context q:rolQuery
	psp:aspect => q:RolFunction
	psp:rolInContext =>
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol

-- Works only for declared roles. Can be replaced by q:rolQuery.
psp:Context q:constructRolGetter
	psp:aspect => q:RolFunction
	psp:rolInContext =>
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol

-- Apply like this: q:constructRolLookup $<rolname>
-- Works only for declared roles. Can be replaced by q:constructRolGetter.
psp:Context q:constructRolLookup
	psp:aspect => q:RolFunction
	psp:rolInContext =>
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol

psp:Context q:constructInverseRolGetter
	psp:aspect => q:RolFunction
	psp:rolInContext =>
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol

-- It is unlikely we will use this constructor in a model (but maybe in a query or statement?)
psp:Context q:iedereRolInContext
	psp:aspect => q:RolFunction
	psp:rolInContext =>
		psp:Rol $context
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Context

--------------------------------------------------------------------------------
-- COMBINATORS
--------------------------------------------------------------------------------
psp:Context q:laatste
	psp:rolInContext =>
		psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:Query

psp:Context q:compose
	psp:rolInContext =>
		psp:Rol $operand
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:Query

-- notEmpty is itself not a Criterium, but the application of notEmpty to a Query is.
psp:Context q:notEmpty
	psp:rolInContext =>
		psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:Query

psp:Context q:closure
	psp:rolInContext =>
		psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:RolQuery

psp:Context q:closure'
	psp:rolInContext =>
	 	psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:RolQuery

psp:Context q:filter
	psp:rolInContext =>
	 	psp:Rol $criterium
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Constraint
	psp:rolInContext =>
		psp:Rol $candidates
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding q:Query

psp:Context q:concat
	psp:rolInContext =>
		psp:Rol $operand
			extern psp:isFunctioneel = false
			psp:mogelijkeBinding q:Query

psp:Context q:rolesOf
	psp:rolInContext =>
		psp:Rol $context
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding psp:Context
--------------------------------------------------------------------------------
-- COMBINATOR CONSTRUCTORS
--------------------------------------------------------------------------------
-- It is unlikely we will use this constructor in a model.
q:Context q:contains
	psp:rolInContext =>
		psp:Rol $valueOrId
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Context
	psp:rolInContext =>
		psp:Rol $query
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:Query

--------------------------------------------------------------------------------
-- CONSTANT
--------------------------------------------------------------------------------
psp:Rol q:Constant
	psp:internalProperty =>
		psp:Property $value
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			psp:range => psp:String

--------------------------------------------------------------------------------
-- VARIABLE
--------------------------------------------------------------------------------
psp:Context q:Variable
	psp:internalProperty =>
		psp:Property $name
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			psp:range => psp:String

psp:Context q:setVariable
	psp:internalProperty =>
		psp:Property $name
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			psp:range => psp:String
	psp:rolInContext =>
		psp:Rol $value
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:RolQuery
			psp:mogelijkeBinding => q:PropertyQuery
			psp:mogelijkeBinding => q:Variable
			psp:mogelijkeBinding => psp:Context

--------------------------------------------------------------------------------
-- ASSIGNMENT
--------------------------------------------------------------------------------
-- We add to the context of the actie that this statement occurs in.
-- addRol :: forall e. ContextID -> RolName -> RolID -> MonadTransactie e Unit
-- Apply like this for the statement: "getuige += verdachte":
--	assignToRol <gen>
--		intern $operation = "add"
--		$rol => pol:Aangifte$getuige
--		$value =>
--			q:constructRolLookup <gen>
--				$rol => pol:Aangifte$verdachte
psp:Context q:assignToRol
	psp:internalProperty =>
		psp:Property $operation
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			-- possible values are: "add", "remove", "set"
			psp:range => psp:String
	psp:rolInContext =>
		-- The rol we will assign to. The qualified name is used!
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol
	psp:rolInContext =>
		-- The rol instance we will add, delete or set:
		psp:Rol $value
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:RolQuery
			psp:mogelijkeBinding => q:Variable
			psp:mogelijkeBinding => psp:Context

-- We add to the context of the actie that this statement occurs in.
-- assignToProperty :: forall e. RolID -> PropertyName -> Value -> MonadTransactie e Unit
-- Apply like this for the statement: 'voornaam van getuige += "Jan"':
--	assignToProperty <gen>
--		intern $operation = "add"
--		$rol => pol:Aangifte$getuige
--		$property => psp:Persoon$voornaam
--		$value =>
--			q:Constant "Jan"
-- Apply like this for the statement: 'voornaam van getuige += verdachte voornaam':
--	assignToProperty <gen>
--		intern $operation = "add"
--		$rol => pol:Aangifte$getuige
--		$property => psp:Persoon$voornaam
--		$value =>
--			q:compose $xxx
--				$operand (1) =>
--					q:constructRolLookup $verdachte
--				$operand (2) =>
--					q:constructExternalPropertyLookup $voornaam
psp:Context q:assignToProperty
	psp:internalProperty =>
		psp:Property $operation
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = true
			-- possible values are: "add", "remove", "set"
			psp:range => psp:String
	psp:internalProperty =>
		psp:Property $constantValue
			extern psp:isFunctioneel = true
			extern psp:isVerplicht = false
			psp:range => psp:String
	psp:rolInContext =>
		-- The rol we will change a property of. The qualified name is used!
		psp:Rol $rol
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Rol
	psp:rolInContext =>
		-- The property we will change. The qualified name is used!
		psp:Rol $property
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => psp:Property
	psp:rolInContext =>
		-- The property query that gives the value:
		psp:Rol $value
			extern psp:isFunctioneel = true
			psp:mogelijkeBinding => q:PropertyQuery
			psp:mogelijkeBinding => q:Variable
