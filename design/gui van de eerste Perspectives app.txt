HERINRICHTING GUI

1. In plaats van een dropdown krijgen we een lijst, links, met alle modellen.

2. Er komt een invoerveld met een button "Creëer nieuw model" ernaast. De button wordt enabled als je in het veld een naam hebt ingetikt.

3. Klikken op een element in de lijst opent de betreffende context in de editor, omdat de actie "Gebruiker edit model X" aangemaakt wordt (zie punt 5).

4. Er komt op de editor:
	- een button save.
	- een file selector.
	- een sluit button.

5. Deze Gui wil een abonnement op de query die alle openstaande "Gebruiker edit model" acties oplevert. Deze GUI zorgt er voor dat er maar één zo'n actie kan zijn. Als hij die vindt, maakt hij een RolContainer (voor het model) aan en een ViewContainer (met de tekst van het model) en daarin komt de Ace Editor. Als de actie wordt beëindigd, sluit hij dit allemaal.

6. Een actie kan een zij-effect hebben dat het resultaat van queries beïnvloedt, zonder dat de dependency administratie daar achter kan komen. Dit geldt voor berekende rollen en properties die niet met een query, maar met een functie worden uitgerekend. De query die de lijst van modellen in de database oplevert is er zo een (als we niet willen gaan subscriben op de changes feed van de modellen database).

7. We hebben op de API geen commando nodig om op een willekeurige query te kunnen abonneren, omdat dat altijd de berekende rol van een context kan zijn. De openstaande "Gebruiker edit model" acties kunnen een rol zijn van het systeem, bijvoorbeeld.

8. Op de API hebben we de volgende speciale commando's nodig:
	a. save een context, met een contextID als argument.
	b. laad een tekst, met een string als argument.
		Het achterliggende commando parseert de tekst, maakt dan een "creeert context" actie als de tekst een nieuwe context beschrijft, en maakt dan een "Gebruiker edit context" actie.
	c. verwerk een tekstwijziging, met een contextID en Array van strings (of zoiets, zie Ace) als argument.
	d. Instantieer een actie, met onderwerp, gezegde, lijdend voorwerp, view, meewerkend voorwerp.

9. Acties, tot dusver:
	Gebruiker edit context
	Gebruiker creeert context

10. Een ContextContainer heeft een speciale property op zijn state, namelijk de actueleRol die de context opende.

11. Deze Gui begint met het openen van het systeem met de gebruiker. Dit is een actie die hij vraagt te instantiëren. Het lijdend voorwerp van het resultaat (het systeem) brengt hij onder in een ContextContainer.
	- Daarbinnen zet hij een RolContainer op voor de modellen van het systeem. Daarbinnen komt de lijst modellen.
	- Daarbinnen maakt hij een presentatiecontainer voor de button "Creëer nieuw model".
	- Daarbinnen zet hij een RolContainer op voor de openstaande edit acties van het systeem (of misschien contexten die momenteel ge-edit worden?).
		- Daarbinnen zet hij een PresentatieComponent op met Ace, de button save, de file selector en de sluit button.

12. Het speciale commando "Save een context" is natuurlijk onzin. Het kan gewoon een actie zijn, waarvan het effect speciaal is. Dat brengt ons op de vraag: Hoe geef je het effect van een actie aan?
Hetzelfde kan gelden voor "Laad een tekst". Het effect leidt dan tot één of twee nieuwe acties. Het is niet zozeer het commando dat bijzonder is, als wel de afhandeling ervan, c.q. het effect van de actie.

13. Het speciale commande "verwerk een tekstwijziging" zouden we als volgt als actie kunnen interpreteren: Laat op Context een actie bestaan waarmee je de property 'tekstwijziging' van een context-buitenrol kunt zetten. De property 'gegenereerdeTekst' van diezelfde rol wordt uit de tekstwijziging berekend. Of misschien is die relatie er niet en is er gewoon een zij-effect van het zetten van de property 'tekstwijziging'.

