MODELLEREN IN CRL

DE BASIS
1. In CRL kun je
	- contexten maken
	- rollen maken
	- properties een waarde geven
	- rollen aan rollen binden.

2. Elke context en rol die je maakt, moet je een type geven. 

3. Een type is altijd óók in een model beschreven en is altijd een context. 

4. Het type van een rol bepaalt welk type rollen eraan gebonden kunnen worden.

5. Het type van een property bepaalt welk type waarden eraan gebonden kunnen worden.

6. Het type van een context beschrijft welke rollen kunnen voorkomen in die context. Een contexttype *moet* minstens twee rollen beschrijven: de interne en de externe rol.

7. Het type van een rol beschrijft welke properties kunnen voorkomen in die rol. Tevens beschrijft het views op die rol. Een roltype *moet* beschrijven welk type rol eraan gebonden kan worden. Tevens *moet* een roltype beschrijven of die rol verplicht is of niet.

8. Een view is een geordende collectie van properties en wordt beschreven met een context.

9. Het type van een property *moet* beschrijven of de property verplicht is, of hij functioneel is en welk type waarden eraan gebonden kunnen worden.


SYNTAX
*Een context maken*. De syntax dwingt af dat je direct het type bepaalt: je kunt alleen een context maken met een *contextdeclaratie*:
	
		<contexttype> <contextnaam>
	
*Een rol maken en binden*. Je kunt alleen een rol maken binnen een context-beschrijving. De syntax dwingt dat af:

	<contexttype> <contextnaam>
		<roltype> => ...
	
Achter de pijl '=>' staat de binding. Voor de pijl staat het type van de rol waarvan je een instantie maakt. De instantie van een rol kun je niet zelf een naam geven. 
Je kunt meerdere instanties van dezelfde rol in één context maken door deze expressie te herhalen. Je kunt rollen ordenen door ze te nummeren:

	<roltype>(1) => ...
	<roltype>(2) => ...

*Een rol maken en niet binden* Je hoeft geen binding op te geven:

	<roltype> => ()

nu heb je wel een instantie van het roltype gemaakt, maar nergens aan gebonden. 

*Een property een waarde geven*. De rolexpressie kan gevolgd worden door:

	<propertynaam> = <propertywaarde>

Voor de properties van de interne en externe rol hebben we aanvullende syntax. Direct onder de contextdeclaratie kun je opnemen:

	interne <propertynaam> = <propertywaarde>
	externe <propertynaam> = <propertywaarde>

TYPE
Een context en een rol moeten gedeclareerd worden met een type. Een type is een context. Maar niet elke context kan als type gebruikt worden! Immers, het type van een context moet minstens de beschrijving van de interne en externe rol geven, het type van een rol moet de mogelijkeBinding geven, enz.

Is er iets dat types gemeenschappelijk hebben?
Alle types zijn een context.
Alle contexten moeten een interne en externe rol hebben.
Dus alle types moeten een interne en externe rol hebben.
Dus een beschrijving van 'type' zou zeggen dat een type een context is en een interne en externe rol verplicht stellen.

psp:Context psp:Type
	$defaultPrototype => psp:TypePrototype
	$rolInContext =>
		psp:Rol $binnenRolBeschrijving
			extern $isFunctioneel = true
			extern $isVerplicht = true
			$mogelijkeBinding => psp:Rol
	$rolInContext =>
		psp:Rol $buitenRolBeschrijving
			extern $isFunctioneel = true
			extern $isVerplicht = true
			$mogelijkeBinding => psp:Rol
	$rolInContext =>
		psp:Rol $rolInContext
			extern $isFunctioneel = false
			$mogelijkeBinding =>
				psp:Sum $RolOrContext
					$alternative => psp:Rol
					$alternative => psp:Context
					$alternative => psp:Sum

psp:Context psp:TypePrototype
	$binnenRolBeschrijving =>
		psp:Rol $binnenRolBeschrijving
			extern $isFunctioneel = true
			$mogelijkeBinding => psp:Rol
	$buitenRolBeschrijving =>
		psp:Rol $buitenRolBeschrijving
			prototype psp:BuitenRolPrototype
			extern $isFunctioneel = true
			$mogelijkeBinding => psp:Rol

psp:Type psp:Rol

ASPECTEN
Een context-, rol- en propertybeschrijving kunnen een //aspect// hebben. Een aspect is als een supertype: elke instantie van een contexttype met aspect A is óók een instantie van A. Hetzelfde geldt voor rol- en propertytypes.

Als je een //type-hiërarchie// maakt, keten je de types dus aan elkaar door middel van aspecten. 

Je kunt een hiërarchie van contexttypes maken, van roltypes en van aspecttypes.






