CRL EDITING
Wat hebben we minimaal nodig om een CRL model enigszins comfortabel in couchdb te krijgen?

1. File upload gevolgd door parsing, gevolgd door semantic checking. 
2. Parsing leidt tot interne representatie; dan moet nog worden geserialiseerd naar een modelbestand en dat moet worden opgeslagen.
3. De core heeft nu alleen een query-interface. Hoe pers ik bovenstaande daarin?

AANPAK
1. Representeer een tekst.
	- property text is een string
	- calculated property parseState is een Boolean. Zodra 'text' veranderd, wordt parseState opnieuw berekend.
	- calculated property parseMessages is een string die begint met "nog niet geparseerd". Zodra 'text' veranderd, wordt parseMessages opnieuw berekend door de parser toe te passen en de messages met show om te vormen tot een string.
2. Calculated property semanticState is ook een string.
	- het resultaat van semantic checking wordt middels show opgeslagen in semanticState.
	- semanticState is "Semantische controle niet mogelijk" zolang parseState false is.
3. We hebben een interface nodig met:
	- een file select button en de weergave van de geselecteerde file.
	- een upload button
	- de weergave van parseMessages
	- de weergave van semanticState
	- een save button
4. We hebben in het protocol naar de Core de mogelijkheid nodig om een property een waarde te geven.
5. We hebben de mogelijkheid nodig om een calculated property af te laten hangen van twee andere (semanticState hangt namelijk af van parseState en text).
6. Als de upload button geklikt wordt, dan moet er een instantie gemaakt worden van ct:Text met de property sourceText gelijk aan de geuploade-file. Deze sourceText is client-side beschikbaar. We moeten dus in staat zijn om vanuit de client een context aan te maken en daar een property van te zetten.

UITWERKING parseMessagesM
1. De property parseMessages moet een computed triplegetter zijn. Zie module Perspectives.ComputedTripleGetters. We gebruiken daar de functie constructTripleGetterWithArbitrarySupport voor. KLAAR
2. Merk op dat deze computed triplegetter meegenomen moet worden in addComputedTripleGetters. KLAAR
2. Representatie van tekst. Ik gebruik een ad hoc model, niet TRL. KLAAR

TEST VAN PARSEMESSAGESM
1. In een testfile, maak een context S van type ct:Text. Lees een file in en maak de tekst de waarde van de sourceText property van S. Vraag dan de property parseMessages op.

Voorbereiding: maak handige functies om contexten en rollen te maken.





================================================================================================
COMPUTEDPROPERTYGETTER BESTAAT NOG NIET
ComputedPropertyGetter zou de pendant van ComputedRolGetter zijn. 
VOLTOOID.

CATCH 22
1. Ik moet query.crl veranderen (ComputedPropertyGetter toevoegen).
2. Daarvoor moet ik een modelfile kunnen parseren en saven.
3. Maar daar heb ik functionaliteit voor nodig die deze verandering vooronderstelt...

Mogelijke aanpak:
- maak ad hoc upload- en save functionaliteit.
Wat is nodig:
- lees file van disk
- parseer de file
- bij succes: sla op in couchdb.
Kan dit in een test?
Ja, sterker nog, ik heb al zo'n test gemaakt! Wel eerst de versie in couchdb weggooien.

REFACTORING
Is:
	(createContextWithSingleRole contextId (q "propertyQuery") pn)
hetzelfde als:
	(createPropertyGetterDescription contextId "propertyQuery" qn)
(waar qn en pn qualified names zijn)
Neen.