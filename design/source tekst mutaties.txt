REPRESENTATIE VAN CONTEXTEN EN ROLLEN IN JSON

Minimale representatie van een Context:

	{
		id: "guid",
		type: ["the-type"],
		binnenRol: 
			{
				binding: ["guid_buitenRol"]
			},
		buitenRol: ["guid_BuitenRol"]
		
		... // andere rollen.
	}

Minimale representatie van een Rol:

	{
		id: "guid",
		type: ["the-type"],
	}

Mogelijke mutaties van een Context:
1. property binnenrol.
2. property buitenrol? Mogelijk moet dit een aparte operator zijn.
3. type.
4. andere rollen.
5. Verwijder de hele context.

Mogelijke mutaties van een Rol:
1. binding.
2. type.
3. properties.
4. Verwijder de hele rol. NB: kan niet voor een buitenrol!

MUTATIE MATRIX FUNCTIONELE EN RELATIONELE PROPERTIES

				Functioneel		Relationeel
zet					[+]				+
vervang door		[+]				+
verwijder			+				+
voegtoe aan			-				+
verwijder uit		-				+

NB: voor Functionele properties is zetten en vervangen door hetzelfde.

MUTATIES AFLEIDEN UIT JSON
Mutaties kunnen we prima afleiden uit de Json representatie. In de tekst hieronder hebben we het over Oud en Nieuw als twee opeenvolgende json beschrijvingen van dezelfde rol of context.
Onderstaande geldt zowel voor de rollen van een context, als voor de properties van een rol.

ZET
Twee situaties:
1. de property wordt toegevoegd (de key is niet aanwezig in Oud, wel in Nieuw);
2. de (array) waarde van de property wordt vervangen (alle waarden aanwezig in Oud verdwijnen en er zijn waarden in Nieuw).

VERVANG DOOR
Het gaat hier om het vervangen van de ene waarde in een array door de andere.
Per constructie is een vervanging de situatie dat Oud een waarde x bevat die Nieuw niet bevat, en Oud een waarde y niet bevat die Nieuw wel bevat:
Oud		[x...]
Nieuw	[y...]

VERWIJDER
De property is verwijderd als de key wel in Oud, maar niet in Nieuw voorkomt.

VOEGTOE AAN
Nieuw bevat een waarde x die niet in Oud voorkomt.

VERWIJDER UIT
Oud bevat een waarde x die niet in Nieuw voorkomt.


TEKST NAAR DE EDITOR WORDT AFGELEID UIT JSON
Er is geen alternatief. Er is geen representatie van een resource in het netwerk, of het zouden de queries van lengte 1 moeten zijn op de resource. Maar er is geen enkele garantie dat die op enig moment een volledig beeld geven.

We moeten dus per Context of Rol een code tekst kunnen afleiden uit de PropDefs.

Tevens moeten we bij de PropDefs de commentaren kunnen vinden. Uit de code tekst en de commentaren stellen we de volledige tekst samen.


TEKST WIJZIGINGEN MOETEN OMGEZET WORDEN IN WIJZIGINGEN VAN DE JSON
Uit de nieuwe versie van een tekst leiden we een nieuwe parsetree (met commentaren) af. Deze parse tree zetten we om in Json. 
Uit de vergelijking van de oude en de nieuwe Json volgen mutaties.
Deze mutaties versturen we aan de betrokkenen (inclusief de gebruiker).
De mutaties voeren we ook uit (als TheoryChanges), wat wil zeggen dat ze in het query-netwerk doorgevoerd worden.
De nieuwe Json slaan we op als PropDefs in de ResourceDefinitions.
