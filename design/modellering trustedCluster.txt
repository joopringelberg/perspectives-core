MODELLERING TRUSTEDCLUSTER EN RELAYSERVER
* sys:Systeem heeft de rollen $trustedCluster en $gebruiker.
* sys:TrustedCluster heeft de rol $clusterGenoot en die heeft de property $url

Om post te bezorgen, moet je van elke connectie de adressen van zijn TrustedCluster weten. Daartoe behoren óók de RelayServer adressen. 
Het is een tweestapsproces:
	* bepaal welke betrokkenen een transactie krijgen;
	* bepaal het IP adres van die betrokkene dat je gebruikt.

Het algoritme voor die tweede stap: kies eerst
	* het eigen adres van de betrokkene, bij afwezigheid daarvan 
	* een adres uit zijn cluster, bij afwezigheid daarvan 
	* het adres van een RelayServer uit zijn cluster

Uitbreiding modellering:
1. Geef $gebruiker een property $url.
2. Geef TrustedCluster een rol $relayServer, te vullen door de Context RelayServer.
3. Deze rol heeft een property $password.
4. Hij wordt gevuld met een context waarvan de buitenrol een property $url heeft.
5. Haal $url weg bij $clusterGenoot.

Hoe modelleren we een betrokkene? 
* merk op dat $clusterGenoot geen $url moet hebben. Een $clusterGenoot is gevuld met een $gebruiker en die heeft een $url!
* hoe dan met RelayServer? De gegevens moeten verzameld worden als de gebruiker gebruik gaat maken van een RelayServer. In de user interface voor dat proces zou je moeten kiezen uit beschikbare RelayServers (de server van Perspectives kunnen we misschien opnemen in het systeem model? Er moet ook een manier zijn om daar servers aan toe te voegen). Hoe dan ook, daar wordt een url bepaald.

Is een RelayServer een Context of een Rol? Als we vooruit denken, aan RelayServers als betaalde services, ligt het voor de hand om er een Context voor te gebruiken. De url zou dan een externe property kunnen zijn. 
De gebruiker heeft een paswoord bij een RelayServer. Dat kan worden bewaard bij de rol $relayServer van het TrustedCluster.

Waar komt de RelayServer van Perspectives vandaan? Kunnen we in een model een instantie opnemen? Zoja, dan zou die server in het systeemmodel opgenomen kunnen worden. Volgens mij moet dat op CRL niveau wel kunnen.

De eerste stap in het proces van aanmelden bij een RelayServer zou dan de keuze van een RelayServer kunnen zijn. Die wordt dan vastgelegd in het TrustedCluster. Misschien moeten we er voorlopig vanuit gaan dat er maar één RelayServer per TrustedCluster is? Beter meteen goed: dus maak een scherm met RelayServers waar je bij aangemeld bent en een dropdown van RelayServers waar je je nog kunt aanmelden.
RelayServers waar je mee bezig bent 
	* vullen de rol $relayServer van $trustedCluster
	* maar hebben nog geen property $password.
RelayServers waarop je geabonneerd bent, vullen die rol en hebben wèl een password.
RelayServers waar je niets mee hebt, vullen geen rol.

Ik kan me voorstellen dat commerciële RelayServers een website hebben waar je iets kunt doen waardoor je de context die zo'n server beschrijft, in je installatie opneemt (b.v. met drag and drop). Vervolgens kun je je via het betreffende scherm abonneren. 

Ik zou dit al voor de Perspectives Relayserver kunnen doen. Dan hoef je deze context niet in het model op te nemen!

Hoe krijg je beschikking over het TrustedCluster van een Betrokkene? Je moet alle anderen een rol geven bij Systeem met de mogelijkheid je cluster te raadplegen. De urls van de leden en relayservers moeten door alle anderen te zien zijn. Maar hoe modelleer je dat?

Overigens, de $url property van $gebruiker van het systeem is altijd beschikbaar voor iedereen. Je moet dus bij elke rol een Actie hebben om $url van die rol te kunnen raadplegen. Doen we dat met een AspectRol?

Dus: elke GebruikerRol heeft een Actie om van elke GebruikerRol de $url property te lezen. Ik zou deze Actie in een Aspect kunnen onderbrengen, waarbij een aspectrol R het subject is van die Actie. Vervolgens geef ik elke Context dat Aspect mee. Elke GebruikerRol in een Context heeft dan R als aspectRol. 

Kan het ook met een prototype? Een prototype vult al delen van (bijvoorbeeld) een context in. Voor een Rol zou daar een AspectRol bij kunnen horen, voor een Context een Aspect.

Maar het ligt heel fundamenteel. Elke Context heeft dit Aspect; èlke GebruikerRol heeft deze AspectRol. Liever maakte ik deze Actie onderdeel van Context zelf.

Elke beschrijving van een GebruikerRol moet voor de rol $objectRol minstens de binding sys:RaadpleegtUrl hebben.

Overigens heb ik GebruikerRol als zodanig helemaal niet gemodelleerd. Een GebruikerRol wordt gevuld door een GebruikerRol of door $gebruiker van sys:Systeem.

$gebruikerRol is een rol van psp:Context?

	$rolInContext =>
		psp:Rol $gebruikerRol
			extern $isFunctioneel = false
			$mogelijkeBinding =>
				psp:Sum $GebruikerOrGebruikerRol
					$alternative => 
					$alternative => psp:Context$gebruikerRol
			$viewInRol =>
				psp:View $Url
					$propertyReferentie => sys:Systeem$gebruiker$url
			$subjectRol =>
				psp:Actie $RaadpleegtGebruikerUrl
					$werkwoord => psp:Raadpleegt
					$objectView => $$Url
			$objectRol => $RaadpleegtGebruikerUrl

Klopt dit?

We geven $gebruiker ook twee calculated properties mee:
	* $clusterAddresses - n IP adressen;
	* $relayServerAddresses - n IP adressen.

In de functie sendTransactieToUser, die het IP adres van een betrokkene gebruikt, vragen we eerst $gebruiker$url op, dan $gebruiker$clusterAddresses en tenslotte $gebruiker$relayServerAddresses.

Hoe geef ik een calculated property aan een rol?


TODO
1. Breng model:Systeem onder in model:Perspectives
	- haal de verwijzing naar q: eruit
	- vervang sys: door psp: