GULP TASK: SCREENUPLOADER

Deze taak bewaakt een directory in het file systeem waarin een met Webpack gecompileerd bestand verschijnt. Zodra dat verandert, voegen we het bestand als attachment toe aan een modelbestand dat zich in Couchdb bevindt.

CONFIGURATIE
De taak moet voor willekeurige modelbestanden kunnen werken. We parameteriseren daarom:
	* de databasenaam
	* de modelfile naam
We gaan ervan uit dat elk project de schermen voor precies één model bevat. De taakconfiguratie is dan ook voor één model bedoeld.

De configuratiefile heet ".screenUploadConfig" en heeft de volgende structuur:

{
	database: "perspect_models",
	model: "model:perspectives",
	output: "output"				// The location of the source files to watch.
}

SKELET VAN DE CODE
const { watch, series } = require('gulp');
const { database, model, output } require('./screenUploadConfig');
const {uploadAttachment} = require('screenuploader');

function upload(cb) {
	return gulp
		.src( output + "/*.js" )
		.pipe( uploadAttachment( database + "/" + model ) )
  cb();
}

exports.default = function() {
  watch( output + '/*.js', upload);
};

ACTUAL UPLOADING
De functie couchdbDatabaseDestination is een stream.Transform. Ik kan deze tamelijk simpele functie verbouwen om de attachment te uploaden.

Ik zou een nieuw project kunnen starten en dat op github zetten, van een package voorzien. Dan kan ik het als dev-dependency opnemen in perspectives-screens. 
Vervolgens kan ik in gulpfile.js een require doen en dan de taak opnemen.

Het is waarschijnlijk handig om het project in Webstorm te maken. Dat heeft betere javascript ondersteuning. Maar als ik het in Atom doe, kan ik Webpack gebruiken en ik weet hoe ik met Git moet werken. Ik kan evt het project óók openen in Webstorm, voor het editen van de code.

Testen. Ik kan in het project een directory opnemen met een target en daar de taak upload met de hand op uitvoeren. Als ik een lokale 'gulpfile.js' maak, kan ik de taak uitvoeren via de interface van het package in Atom.

AANPAK
1. Maak een functie 'addAttachment' in domeinCache in perspectives-core.
2. Breng die functie over naar perspectives-couchdb.
	- maak een versie van de functie die een Promise teruggeeft.
	- dat betekent waarschijnlijk dat ik een run functie moet maken voor MonadCouchdb.
3. Zoek uit hoe die functie beschikbaar kan worden gemaakt in Javascript.
	Dat is eenvoudig. Zie: https://leanpub.com/purescript/read#leanpub-auto-calling-purescript-from-javascript
	De output van de Purescript compiler is een CommonJS module. Die kun je met 'require' opnemen en dan is elke 
	top-level functie een member van de module.
4. Voeg perspectives-couchdb als dependency toe aan perspectives-screenuploader.

LIBRARY COUCHDB
Uit het project perspectives-couchdb kan ik een library maken die een addAttachment functie ter beschikking stelt.
a. Hoe noem ik deze library?
b. Hoe produceer ik deze library met Pulp? Zo:

	pulp browserify --standalone myBundle --to myBundle.js
	
	This makes a bundle which comes wrapped in a UMD header (meaning it supports both CommonJS and AMD, and will install itself in the global namespace under the name you provided if neither is present), and the exports it provides will be the same as those you export in your Main module.

PROBLEEM: IMPORT IN SCREENUPLOADER
In screenuploader.js gebruik ik de ES6 module syntax. Maar mijn node versie kan daar niet mee overweg. Ik moet dus transpileren. Ik wil sowieso een bundel maken. Hoe?