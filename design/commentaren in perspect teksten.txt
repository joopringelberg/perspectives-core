COMMENTAREN

	-- Commentaar 1
	:Aangifte :aangifte1 -- Commentaar 2
		-- Commentaar 3
		:Aangever => :Jansen -- Commentaar 4
			-- Commentaar 5
			:betrouwbaarheid = 10
			-- Commentaar 6
		-- Commentaar 7
		-- Commentaar 7a
		:status = "voltooid"
		:urgentie = 5
		-- Commentaar 8

Commentaar na een blok wordt gezien als commentaar bij de eerstvolgende regel.
Meerdere aaneengesloten regels commentaar worden beschouwd als één commentaarblok.

1. Genereer tekstregels zonder commentaar uit de json
2. Voeg commentaar toe.

NB: onderstaande representatie gaat uit van uniciteit van coderegels!
comments: 
	{
		beforeLines:
			{
				":Aangifte :aangifte1" : ["Commentaar 1",]
				":Aangever => :Jansen" : ["Commentaar 3"],
				":betrouwbaarheid = 10" : ["Commentaar 6"]
				":status = "voltooid"" : ["Commentaar 7", "Commentaar 7a"]
			}
		onLines: 
			{
				":Aangifte :aangifte1" : ["Commentaar 2"],
				":Aangever => :Jansen" : ["Commentaar 4"]
			}
		afterLines: 
			{
				":betrouwbaarheid = 10" : ["Commentaar 6"],
				":urgentie = 5" : ["Commentaar 8"]
			}
	} 

Mutatie die regel verwijdert:
	- commentaar op die regel verdwijnt mee.
	- commentaar voor en na die regel verdwijnt mee.
	- er is geen invloed op de rest van de commentaren!

Mutatie die regel toevoegt:
	- voeg onderaan toe
	- er is geen invloed op de commentaren

Merk op dat commentaren tussen regels niet verdwijnen door een mutatie.

Mutatie die regel verandert:
	- zoek met de oude regel of er een commentaar voor, op of na is
	- verhang die commentaren.

Twee keer parsen:
	- de eerste keer om commentaren van de rest te scheiden
	- de tweede keer om de Perspect syntax eruit te halen.

GRAMMATICA VOOR DE COMMENTAAR SLAG

file = codeblok+
expr = codeLine | commentLineBeforeCodeLine | codeWithInlineComment
codeblok = expr BLOK expr* commentLine*

codeLineWithInlineComment = manyTill anyChar string "--"


file = blok*
blok = withBlock codeLine anyLine
anyLine = codeAndComment | comment | code
codeLine = codeAndComment | code
codeAndComment = yyyy -- xx \n
comment = -- xxxx \n
code = yyyy \n

============================================================
file = blokOrLines*


blokOrLines = blok | lines
blok = withBlock lines (block1 blokOrLines)
lines = comment* anyCodeLine

anyCodeLine = codeLineWithInlineComment | codeLine
codeLineWithInlineComment = yyyy -- xx \n
comment = -- xxxx \n
codeLine = yyyy \n


Mappings:
codeAndComment = codeLineWithInlineComment
code = codeLine



