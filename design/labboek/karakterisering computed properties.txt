KARAKTERISERING COMPUTED PROPERTIES
Een computed property (te onderscheiden van een calculated property) kunnen we in principe ook beschrijven in termen van:
	- de property isFunctioneel
	- de property isVerplicht
	- de rol range

Maar als we q:ComputedPropertyGetter een rol $range geven, vindt de TripleGetter rangeDefM hem niet. Die vraagt namelijk naar "model:Perspectives$Property$range" en niet naar model:QueryAst$ComputedPropertyGetter$range.

Dat wordt een probleem voor deze definitie:
psp:Context ct:Text
  $rolInContext =>
    psp:Rol $binnenRolBeschrijving
      extern $isFunctioneel = true
      extern $isVerplicht = true
      $mogelijkeBinding => psp:Rol
      $rolProperty =>
        q:ComputedPropertyGetter $parseState
          extern $functionName = "parseStateM"
          extern $isFunctioneel = true
          extern $isVerplicht = false
          $range => psp:Boolean
      $rolProperty =>
        q:ComputedPropertyGetter $parseMessages
          extern $functionName = "parseMessagesM"
          extern $isFunctioneel = true
          extern $isVerplicht = false
          $range => psp:String
  $rolInContext =>
    psp:Rol $buitenRolBeschrijving
      extern $isFunctioneel = true
      extern $isVerplicht = true
      $mogelijkeBinding => psp:Rol

Hier beschrijf ik $parseState als een q:ComputedPropertyGetter, met een range psp:Boolean. Maar dat is dus impliciet q:ComputedPropertyGetter$range.

Ik denk dat ik dit heb opgelost door q:ComputedPropertyGetter psp:Property als aspect te geven. Nu heeft q:ComputedPropertyGetter 贸贸k de rollen van psp:Property, dus 贸贸k psp:Property$range. Ik moet dat natuurlijk wel gebruiken in de definitie van ct:Text:

psp:Context ct:Text
  $rolInContext =>
    psp:Rol $binnenRolBeschrijving
      extern $isFunctioneel = true
      extern $isVerplicht = true
      $mogelijkeBinding => psp:Rol
      $rolProperty =>
        q:ComputedPropertyGetter $parseState
          extern $functionName = "parseStateM"
          extern $isFunctioneel = true
          extern $isVerplicht = false
          $psp:Property$range => psp:Boolean
      $rolProperty =>
        q:ComputedPropertyGetter $parseMessages
          extern $functionName = "parseMessagesM"
          extern $isFunctioneel = true
          extern $isVerplicht = false
          $psp:Property$$range => psp:String
  $rolInContext =>
    psp:Rol $buitenRolBeschrijving
      extern $isFunctioneel = true
      extern $isVerplicht = true
      $mogelijkeBinding => psp:Rol

Nu is er het probleem van de properties $isFunctioneel en $isVerplicht. Ik los dat op door de rol q:ComputedPropertyGetter$buitenRolBeschrijving de aspectRol psp:Property$buitenRolBeschrijving te geven. Dan heeft de buitenrol van q:ComputedPropertyGetter dezelfde properties als de buitenrol van psp:Property.

psp:Context q:ComputedPropertyGetter
	$aspect => psp:Property
	$aspect => psp:Function
	$buitenRolBeschrijving =>
		psp:Rol $buitenRolBeschrijving
			$aspectRol => psp:Property$buitenRolBeschrijving
			$rolProperty =>
				psp:Property $functionName
					extern $isFunctioneel = true
					extern $isVerplicht = true
					$range => psp:String

Nu de definitie van ct:Text aanpassen:

psp:Context ct:Text
  $rolInContext =>
    psp:Rol $binnenRolBeschrijving
      extern $isFunctioneel = true
      extern $isVerplicht = true
      $mogelijkeBinding => psp:Rol
      $rolProperty =>
        q:ComputedPropertyGetter $parseState
          extern $functionName = "parseStateM"
          extern psp:Property$buitenRolBeschrijving$isFunctioneel = true
          extern psp:Property$buitenRolBeschrijving$isVerplicht = false
          psp:Property$range => psp:Boolean
      $rolProperty =>
        q:ComputedPropertyGetter $parseMessages
          extern $functionName = "parseMessagesM"
          extern psp:Property$buitenRolBeschrijving$isFunctioneel = true
          extern psp:Property$buitenRolBeschrijving$isVerplicht = false
          psp:Property$range => psp:String
  $rolInContext =>
    psp:Rol $buitenRolBeschrijving
      extern $isFunctioneel = true
      extern $isVerplicht = true
      $mogelijkeBinding => psp:Rol

Merk op dat de property parseState van de binnenRol van ct:Text 
	- een impliciet gekwantificeerde naam $functionName gebruikt; die is eigen aan ct:Text zelf;
	- een expliciet gekwantificeerde naam psp:Property$buitenRolBeschrijving$isFunctioneel gebruikt; dat is een property van de aspectrol van deze binnenRol.
	
================================================================================
DEBUGGEN
Probleem: 
checkRolForQualifiedProperty
	"model:Perspectives$Property$buitenRolBeschrijving$isFunctioneel"
	"model:QueryAst$ComputedPropertyGetter$buitenRolBeschrijving"
levert false, maar het moet true zijn.
Het gaat (ook) fout omdat checkRolHasAspect false teruggeeft.
Deze functie is opgebouwd op isOrHasAspect, maar die is gemaakt voor Contexten - niet voor Rollen. Er moet hier gekeken worden naar aspectRollen, niet naar aspecten.
OPGELOST