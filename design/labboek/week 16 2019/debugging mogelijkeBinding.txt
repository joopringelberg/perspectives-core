(IncorrectContextRolBinding) In de context 'model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot' is de ContextRol 'model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot$subject_1' gebonden aan 'model:Perspectives$TrustedCluster$clusterGenoot'(type: 'model:Perspectives$Rol') maar moet worden gebonden aan een instantie van (één van de) type(s) '["model:Perspectives$PerspectivesSysteem$gebruiker"]'.


show (IncorrectContextRolBinding cid rn bd tp mb) = "(IncorrectContextRolBinding) In de context '" <> cid <> "' is de ContextRol '" <> rn <> "' gebonden aan '" <> bd <> "'(type: '" <> tp <> "') maar moet worden gebonden aan een instantie van (één van de) type(s) '" <> mb <> "'."
  
  
def = cid = 'model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot'
rolInstance = rn = 'model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot$subject_1'
boundValue = bd = 'model:Perspectives$TrustedCluster$clusterGenoot'
typeOfTheBinding = tp = 'model:Perspectives$Rol'
toegestaneBindingen = mb = ["model:Perspectives$PerspectivesSysteem$gebruiker"]

(isInEachRolTelescope typeOfTheBinding) = (isInEachRolTelescope 'model:Perspectives$Rol')

VOORLOPIGE CONCLUSIES
1. typeOfTheBinding is hier volledig irrelevant; het gaat om boundValue
2. Ik vermoed sterk dat de argumenten van isInEachRolTelescope omgedraaid moeten worden.
In termen van de parameters van isInEachRolTelescope:

	allowedBinding ## (`isInEachRolTelescope` t)
	t is on each rolTelescope that starts with allowedBinding

Maar je zou willen kunnen lezen:

	allowedBinding is on each rolTelescope that starts with t

De zinvolle test is namelijk:

	model:Perspectives$PerspectivesSysteem$gebruiker is on each rolTelescope that starts with model:Perspectives$TrustedCluster$clusterGenoot
	
oftewel (in termen van variabelen van checkBindingOfContextRol):

	boundValue ## (isInEachRolTelescope toegestaneBindingen)

3. Maar: de manier waarop ik isInEachRolTelescope inzet in checkBindingOfContextRol dicteert juist de omgekeerde volgorde van parameters:

	rolInstance @@>  STGC.some (DTG.rolType >-> mogelijkeBinding >-> sumToSequence >-> (isInEachRolTelescope typeOfTheBinding))

oftwel:

	toegestaneBinding ## (isInEachRolTelescope t)

Het enige dat niet klopt is dat 'typeOfTheBinding' gebruikt wordt, in plaats van 'boundValue'.

4. Bij $mogelijkeBinding van een Rol R geef je een type op. Een instantie van een binding (dus als een instantie van R gemaakt wordt) moet gebonden worden aan een instantie die van dat type is.
De rol waar aan gebonden wordt, is hier $subject:

	$rolInContext =>
		psp:Rol $subject
			$mogelijkeBinding => 
				psp:Sum $botOrUser
					$alternative => psp:PerspectivesSysteem$gebruiker
					$alternative => psp:Context$contextBot

In de *definitie van de Actie* RaadpleegtClusterGenoot binden we de Rol $subject aan $clusterGenoot:

	$subject => psp:TrustedCluster$clusterGenoot

$clusterGenoot is gedefinieerd als:

		psp:Rol $clusterGenoot
			$mogelijkeBinding => psp:PerspectivesSysteem$gebruiker

Maar het type van $clusterGenoot is psp:Rol en dat strookt niet met $botOrUser. $clusterGenoot zelf wel. Als we een *instantie* maken van RaadpleegtClusterGenoot, willen we een instantie van een rol maken die het subject representeert. Maar RaadpleegtClusterGenoot definieert helemaal geen rollen!

	$actie =>
		psp:Actie $RaadpleegtClusterGenoot
			$subject => psp:TrustedCluster$clusterGenoot
			--$subject => psp:PerspectivesSysteem$gebruiker
			$werkwoord => psp:Raadpleegt
			$object => psp:TrustedCluster$clusterGenoot
			$objectView => $$clusterGenoot$Adressering

	$rolInContext =>
		psp:Rol $subject
			extern $isFunctioneel = false
			$mogelijkeBinding => 
				psp:Sum $botOrUser
					$alternative => psp:PerspectivesSysteem$gebruiker
					$alternative => psp:Context$contextBot

checkMogelijkeBinding :: forall e. RolDef -> TDChecker e Unit
checkMogelijkeBinding def = do
  mmbinding <- lift (def @@> mogelijkeBinding)
  case mmbinding of
    Nothing -> tell [MissingMogelijkeBinding $ unwrap def]
    (Just mbinding) -> do
      mlocalMbinding <- lift (def @@> ownMogelijkeBinding) -- Can be a sum type.
      case mlocalMbinding of
        Nothing -> pure unit
        -- TODO. 1. localMbinding (de lokale mogelijkeBinding van def) kan een sum-type zijn.
        -- TODO. 2. De mogelijke binding van een AspectRol kan zelf óók weer een mogelijke binding hebben.
        -- Oftwel, we moeten hier door de rolGraaf heen lopen.
        (Just localMbinding) -> lift (def @@= closureOfAspectRol) >>= traverse_
          (\aspectRol -> do
            aspectMbindingen <- (lift (aspectRol @@= ownMogelijkeBinding >-> sumToSequence))
            (hasAnAspect :: PBool) <- lift (aspectRol @@>> (STGC.some (ownMogelijkeBinding >-> sumToSequence >-> isOrHasAspect localMbinding)))
            case hasAnAspect of
              (PBool "true") -> pure unit
              otherwise -> (tell [MogelijkeBindingNotSubsumed mbinding (unwrap aspectRol) (show aspectMbindingen) (unwrap def)]))

==========================================================================================
(MogelijkeBindingNotSubsumed) De mogelijke binding 'model:Perspectives$ActieModel$subject$botOrUser' van de AspectRol 'model:Perspectives$ActieModel$subject' is geen aspect van de mogelijke binding 'model:Perspectives$TrustedCluster$clusterGenoot' van de rol 'model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot1$subject'!

show (MogelijkeBindingNotSubsumed ownBinding aspect aspectBinding rol) = "(MogelijkeBindingNotSubsumed) De mogelijke binding '" <> aspectBinding <> "' van de AspectRol '" <> aspect <> "' is geen aspect van de mogelijke binding '" <> ownBinding <> "' van de rol '" <> rol <> "'!"

[MogelijkeBindingNotSubsumed mbinding (unwrap aspectRol) aspectMbinding (unwrap def)]

ownBinding 		= localMbinding		= model:Perspectives$TrustedCluster$clusterGenoot
aspect 			= aspectRol			= model:Perspectives$ActieModel$subject
aspectBinding 	= aspectMbinding	= model:Perspectives$ActieModel$subject$botOrUser
rol 			= def				= model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot1$subject

(localMbinding @@> (isInEachRolTelescope aspectMbinding))

(model:Perspectives$TrustedCluster$clusterGenoot @@> (isInEachRolTelescope model:Perspectives$ActieModel$subject$botOrUser)

Het gaat nu nog fout omdat de mogelijkeBinding van $subject in ActieModel een psp:Sum is.

En nu niet meer!

==========================================================================================

(IncorrectContextRolBinding) In de context 'model:Perspectives$TrustedCluster' is de ContextRol 'model:Perspectives$TrustedCluster$actie_1' gebonden aan 'model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot'(type: 'model:Perspectives$Context') maar moet worden gebonden aan een instantie van (één van de) type(s) '["model:Perspectives$ActieModel"]'.

show (IncorrectContextRolBinding cid rn bd tp mb) = "(IncorrectContextRolBinding) In de context '" <> cid <> "' is de ContextRol '" <> rn <> "' gebonden aan '" <> bd <> "'(type: '" <> tp <> "') maar moet worden gebonden aan een instantie van (één van de) type(s) '" <> mb <> "'."
  
  
def = cid 					= model:Perspectives$TrustedCluster
rolInstance = rn			= model:Perspectives$TrustedCluster$actie_1
boundValue = bd 			= model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot
typeOfTheBinding = tp 		= model:Perspectives$Context
possibleBindings = mb 		= model:Perspectives$ActieModel

(isInEachRolTelescope boundValue) = (isInEachRolTelescope 'model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot')

possibleBinding ## (isInEachRolTelescope typeOfTheBinding) = 
	model:Perspectives$ActieModel ## (isInEachRolTelescope 'model:Perspectives$TrustedCluster$RaadpleegtClusterGenoot')
	
On each path through the mogelijkeBinding graph of ActieModel there is a type x for which holds:
	RaadpleegtClusterGenoot hasType x


RaadpleegtClusterGenoot `hasType` ActieModel
zou waar moeten zijn. En:
ActieModel `isContextTypeOf` RaadpleegtClusterGenoot

==========================================================================================
TEST:
some, all: wat is het resultaat als een leqe sequence wordt aangeboden?